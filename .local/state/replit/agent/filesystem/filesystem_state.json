{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive full-stack enterprise web application called \"STAR Solutions\" that provides a software solutions business platform with advanced role-based functionality. The application features dual authentication systems, integrated ticketing through Zammad, subscription management, and admin functions for customer approval and application link management.\n\n## Key Features Integrated (January 8, 2025)\n\n### **Authentication System**\n- **Dual Login Flow**: Customer authentication via PostgreSQL database, Employee authentication via Active Directory (PAM/SSSD)\n- **Customer Registration**: Email/password with admin approval workflow\n- **Session Management**: Express sessions with PostgreSQL persistence\n- **Role-Based Access**: Customer, Employee, and Admin roles with different permissions\n\n### **Zammad Integration**\n- **Full Ticketing System**: Integration with Zammad server at `10.171.132.90:3000`\n- **Customer Support**: Customers can create, view, and track support tickets\n- **Employee Ticket Management**: Full ticket management for employees and admins\n- **Automatic User Creation**: Creates Zammad customers automatically\n- **Ticket Synchronization**: Maps between internal and Zammad ticket formats\n\n### **Customer Features**\n- **Ticket Portal**: Create and manage support tickets through Zammad integration\n- **Profile Management**: Company information and contact details\n- **Dashboard**: Personal overview of tickets and account status\n\n### **Employee Features**\n- **Application Links**: Quick access to internal tools (Prometheus, Wazuh, Calendar, Documentation)\n- **Advanced Ticket Management**: Full ticket system with priority, status, and assignment\n- **Admin Functions**: Customer approval, application link management\n- **AD Authentication**: System-level authentication with fallback test users\n\n### **Database Schema**\n- **users**: Customer accounts with approval workflow\n- **ad_users**: Employee accounts from Active Directory\n- **tickets**: Support tickets with Zammad integration\n- **application_links**: Internal application quick access\n- **sessions**: Authentication session management\n\n### **Demo Data**\n- Admin user: admin@starsolutions.ca / admin123\n- Demo customer: customer@example.com / customer123\n- Test employees: john.doe, jane.smith, admin (all password123)\n- Sample tickets for testing ticket system functionality\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development/build tooling\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: TailwindCSS with custom CSS variables for theming\n- **Routing**: Wouter for client-side routing with protected route components\n- **State Management**: TanStack React Query for server state and custom auth context\n- **Form Handling**: React Hook Form with Zod schema validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Pattern**: RESTful endpoints with JSON responses\n- **Authentication**: Session-based auth with dual login flows (AD for employees, traditional for customers)\n- **Database Integration**: Drizzle ORM with connection pooling via Neon serverless\n- **Password Security**: bcrypt for customer password hashing\n- **Session Storage**: PostgreSQL-based session store using connect-pg-simple\n\n## Database Design\n- **Primary Database**: PostgreSQL with Drizzle ORM schema management\n- **Core Tables**: \n  - `users` table with polymorphic user types (employee/customer)\n  - `sessions` table for authentication session management\n- **Schema Migrations**: Drizzle Kit for database schema versioning and deployment\n\n## Authentication & Authorization\n- **Dual Authentication System**: \n  - Active Directory integration for employees (using activedirectory2 package)\n  - Email/password authentication for customers\n- **Session Management**: Cookie-based sessions with PostgreSQL persistence\n- **Role-Based Access**: Route protection based on user type (employee/customer/admin)\n- **Password Security**: bcrypt hashing for customer accounts, AD delegation for employees\n\n# External Dependencies\n\n## Third-Party Services\n- **Zammad Integration**: Ticketing system integration at `http://10.171.132.90:5432`\n  - Employee access to full Zammad interface\n  - Customer portal integration with embedded iframe\n- **Active Directory**: On-premise AD server integration for employee authentication\n  - Server configuration via `AD_SERVER` environment variable\n  - Base DN configuration for LDAP queries\n\n## Database Services\n- **Neon PostgreSQL**: Serverless PostgreSQL database with connection pooling\n- **Connection Management**: `@neondatabase/serverless` for optimized database connections\n\n## UI/Component Libraries\n- **Radix UI**: Comprehensive set of unstyled, accessible UI primitives\n- **Lucide React**: Icon library for consistent iconography\n- **TailwindCSS**: Utility-first CSS framework with custom design system\n\n## Development Tools\n- **Replit Integration**: Development environment plugins for live preview and debugging\n- **TypeScript**: Strong typing across full stack\n- **Vite**: Fast development server and build tool with hot module replacement","size_bytes":5318},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/App_1754626562549.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"./components/ui/toaster\";\nimport { AuthProvider } from \"./hooks/useAuth\";\nimport NotFound from \"./pages/not-found\";\nimport Home from \"./pages/Home\";\nimport Services from \"./pages/Services\";\nimport Solutions from \"./pages/Solutions\";\nimport About from \"./pages/About\";\nimport Contact from \"./pages/Contact\";\nimport CustomerDashboard from \"./pages/CustomerDashboard\";\nimport EmployeeDashboard from \"./pages/EmployeeDashboard\";\nimport AdminDashboard from \"./pages/AdminDashboard\";\nimport ProtectedRoute from \"./components/ProtectedRoute\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/services\" component={Services} />\n      <Route path=\"/solutions\" component={Solutions} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/contact\" component={Contact} />\n\n      {/* Protected routes */}\n      <Route path=\"/customer-dashboard\">\n        <ProtectedRoute type=\"customer\">\n          <CustomerDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/employee-dashboard\">\n        <ProtectedRoute type=\"employee\">\n          <EmployeeDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/admin-dashboard\">\n        <ProtectedRoute type=\"admin\">\n          <AdminDashboard />\n        </ProtectedRoute>\n      </Route>\n\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <Router />\n        <Toaster />\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1840},"attached_assets/App_1754651759995.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"./components/ui/toaster\";\nimport { AuthProvider } from \"./hooks/useAuth\";\nimport NotFound from \"./pages/not-found\";\nimport Home from \"./pages/Home\";\nimport Services from \"./pages/Services\";\nimport Solutions from \"./pages/Solutions\";\nimport About from \"./pages/About\";\nimport Contact from \"./pages/Contact\";\nimport CustomerDashboard from \"./pages/CustomerDashboard\";\nimport EmployeeDashboard from \"./pages/EmployeeDashboard\";\nimport AdminDashboard from \"./pages/AdminDashboard\";\nimport ProtectedRoute from \"./components/ProtectedRoute\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/services\" component={Services} />\n      <Route path=\"/solutions\" component={Solutions} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/contact\" component={Contact} />\n\n      {/* Protected routes */}\n      <Route path=\"/customer-dashboard\">\n        <ProtectedRoute type=\"customer\">\n          <CustomerDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/employee-dashboard\">\n        <ProtectedRoute type=\"employee\">\n          <EmployeeDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/admin-dashboard\">\n        <ProtectedRoute type=\"admin\">\n          <AdminDashboard />\n        </ProtectedRoute>\n      </Route>\n\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <Router />\n        <Toaster />\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1840},"attached_assets/Contact_1754651827740.tsx":{"content":"import { useState } from 'react';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useToast } from '@/hooks/use-toast';\nimport Navbar from '@/components/Navbar';\nimport Footer from '@/components/Footer';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card } from '@/components/ui/card';\nimport { MapPin, Phone, Mail, Clock } from 'lucide-react';\n\nconst formSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters.\"),\n  email: z.string().email(\"Please enter a valid email address.\"),\n  phone: z.string().min(5, \"Please enter a valid phone number.\"),\n  company: z.string().optional(),\n  subject: z.string().min(1, \"Please select a subject.\"),\n  message: z.string().min(10, \"Message must be at least 10 characters.\"),\n});\n\nconst Contact = () => {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      company: \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const onSubmit = async (values: z.infer<typeof formSchema>) => {\n    setIsSubmitting(true);\n    try {\n      // In a real application, you would send this data to your backend\n      console.log(values);\n      \n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: \"Message sent!\",\n        description: \"We'll get back to you as soon as possible.\",\n      });\n      \n      form.reset();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"There was a problem sending your message. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      <main className=\"flex-grow\">\n        {/* Hero Section */}\n        <div className=\"bg-primary py-20 px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-7xl mx-auto text-center\">\n            <h1 className=\"text-4xl font-extrabold tracking-tight text-white sm:text-5xl md:text-6xl\">\n              Contact Us\n            </h1>\n            <p className=\"mt-6 max-w-2xl mx-auto text-xl text-blue-100\">\n              Get in touch with our team to discuss your project or inquire about our services\n            </p>\n          </div>\n        </div>\n\n        {/* Contact Form & Information */}\n        <div className=\"py-16 bg-white\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-10\">\n              {/* Contact Information */}\n              <div className=\"lg:col-span-1\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Contact Information</h2>\n                \n                <div className=\"space-y-6\">\n                  <Card className=\"p-6\">\n                    <div className=\"flex items-start\">\n                      <MapPin className=\"h-6 w-6 text-primary mr-3 flex-shrink-0\" />\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">Our Office</h3>\n                        <p className=\"text-gray-600 mt-1\">\n                          123 Tech Avenue<br />\n                          Suite 456<br />\n                          Vancouver, BC V6B 4Y8<br />\n                          Canada\n                        </p>\n                      </div>\n                    </div>\n                  </Card>\n                  \n                  <Card className=\"p-6\">\n                    <div className=\"flex items-start\">\n                      <Phone className=\"h-6 w-6 text-primary mr-3 flex-shrink-0\" />\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">Phone</h3>\n                        <p className=\"text-gray-600 mt-1\">\n                          +1 (604) 555-1234<br />\n                          Monday - Friday, 9am - 5pm PST\n                        </p>\n                      </div>\n                    </div>\n                  </Card>\n                  \n                  <Card className=\"p-6\">\n                    <div className=\"flex items-start\">\n                      <Mail className=\"h-6 w-6 text-primary mr-3 flex-shrink-0\" />\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">Email</h3>\n                        <p className=\"text-gray-600 mt-1\">\n                          info@tecknet.ca<br />\n                          support@tecknet.ca\n                        </p>\n                      </div>\n                    </div>\n                  </Card>\n                  \n                  <Card className=\"p-6\">\n                    <div className=\"flex items-start\">\n                      <Clock className=\"h-6 w-6 text-primary mr-3 flex-shrink-0\" />\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">Business Hours</h3>\n                        <p className=\"text-gray-600 mt-1\">\n                          Monday - Friday: 9:00 AM - 5:00 PM<br />\n                          Saturday - Sunday: Closed\n                        </p>\n                      </div>\n                    </div>\n                  </Card>\n                </div>\n              </div>\n              \n              {/* Contact Form */}\n              <div className=\"lg:col-span-2\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Send Us a Message</h2>\n                \n                <Card className=\"p-6\">\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <FormField\n                          control={form.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Full Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"John Doe\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Email Address</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"john.doe@example.com\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"phone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Phone Number</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"company\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Company Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Acme Inc. (Optional)\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"subject\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Subject</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select a subject\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"general\">General Inquiry</SelectItem>\n                                <SelectItem value=\"sales\">Sales Question</SelectItem>\n                                <SelectItem value=\"support\">Technical Support</SelectItem>\n                                <SelectItem value=\"partnership\">Partnership Opportunity</SelectItem>\n                                <SelectItem value=\"careers\">Careers</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"message\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Message</FormLabel>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"Please tell us about your project or inquiry...\"\n                                className=\"min-h-[150px]\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting}>\n                        {isSubmitting ? \"Sending...\" : \"Send Message\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Map Section (would be integrated with Google Maps API in a real application) */}\n        <div className=\"py-16 bg-gray-50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900 text-center mb-8\">Find Us</h2>\n            <div className=\"h-96 bg-gray-200 rounded-lg overflow-hidden\">\n              {/* This would be a Google Maps iframe or integration in a real app */}\n              <div className=\"w-full h-full flex items-center justify-center text-gray-500\">\n                <p>Map would be displayed here</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Contact;\n","size_bytes":11912},"attached_assets/CustomerDashboard_1754626605361.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport CustomerSidebar from '@/components/dashboard/CustomerSidebar';\nimport TicketStats from '@/components/dashboard/TicketStats';\nimport TicketTable from '@/components/dashboard/TicketTable';\nimport SubscriptionCard from '@/components/dashboard/SubscriptionCard';\nimport { Button } from '@/components/ui/button';\nimport { Spinner } from '@/components/ui/spinner';\nimport { PlusIcon } from 'lucide-react';\nimport { ticketApi, subscriptionApi, Ticket, Subscription } from '@/lib/api';\n\nconst CustomerDashboard = () => {\n  const { user } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  // Fetch tickets\n  const { \n    data: ticketsData, \n    isLoading: isLoadingTickets,\n    error: ticketsError\n  } = useQuery({ \n    queryKey: ['/api/tickets'],\n    refetchInterval: 30000 // Refetch every 30 seconds\n  });\n\n  // Fetch subscriptions\n  const { \n    data: subscriptionsData, \n    isLoading: isLoadingSubscriptions,\n    error: subscriptionsError\n  } = useQuery({ \n    queryKey: ['/api/subscriptions']\n  });\n\n  const tickets: Ticket[] = ticketsData?.tickets || [];\n  const subscriptions: Subscription[] = subscriptionsData?.subscriptions || [];\n  \n  const ticketStats = ticketApi.calculateStats(tickets);\n\n  // Handle mobile menu toggle\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  if (isLoadingTickets || isLoadingSubscriptions) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Spinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (ticketsError || subscriptionsError) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Error Loading Dashboard</h2>\n          <p className=\"text-gray-600\">\n            {(ticketsError as Error)?.message || (subscriptionsError as Error)?.message || \"Failed to load dashboard data\"}\n          </p>\n          <Button onClick={() => window.location.reload()} className=\"mt-4\">\n            Try Again\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Sidebar - hidden on mobile */}\n      <div className={`${isMobileMenuOpen ? 'block' : 'hidden'} md:block fixed inset-0 z-20 md:relative md:z-0`}>\n        <CustomerSidebar activePage=\"dashboard\" />\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-white shadow-sm\">\n          <div className=\"flex items-center justify-between h-16 px-4 sm:px-6 lg:px-8\">\n            <button className=\"md:hidden text-gray-500 focus:outline-none\" onClick={toggleMobileMenu}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n              </svg>\n            </button>\n\n            <div className=\"flex-1\"></div>\n\n            <div className=\"ml-4 flex items-center md:ml-6\">\n              <button className=\"p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\" />\n                </svg>\n              </button>\n\n              <div className=\"ml-3 relative\">\n                <div className=\"flex items-center\">\n                  <span className=\"hidden md:block mr-3 text-sm font-medium text-gray-700\">\n                    {user?.companyName || user?.fullName}\n                  </span>\n                  <div className=\"h-8 w-8 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white font-medium text-sm\">\n                      {user?.companyName \n                        ? user.companyName.split(\" \").map(n => n[0]).join(\"\").toUpperCase() \n                        : (user?.fullName || \"\").split(\" \").map(n => n[0]).join(\"\").toUpperCase()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <main className=\"flex-1 overflow-y-auto bg-gray-50 p-4 sm:p-6 lg:p-8\">\n          <div className=\"pb-5 border-b border-gray-200 sm:flex sm:items-center sm:justify-between\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Customer Dashboard</h1>\n            <div className=\"mt-3 sm:mt-0 sm:ml-4\">\n              <Button className=\"inline-flex items-center\">\n                <PlusIcon className=\"mr-2 h-4 w-4\" />\n                New Support Ticket\n              </Button>\n            </div>\n          </div>\n\n          {/* Subscription Information */}\n          <div className=\"mt-6\">\n            <h2 className=\"text-lg font-medium text-gray-900\">Your Subscriptions</h2>\n            <div className=\"mt-3 space-y-6\">\n              {subscriptions.length > 0 ? (\n                subscriptions.map((subscription) => (\n                  <SubscriptionCard \n                    key={subscription.id}\n                    subscription={subscription} \n                  />\n                ))\n              ) : (\n                <div className=\"bg-white rounded-lg shadow-md p-6 text-center\">\n                  <p className=\"text-gray-600\">You don't have any active subscriptions.</p>\n                  <Button variant=\"outline\" className=\"mt-4\">Contact Sales</Button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Ticket Stats */}\n          <TicketStats \n            total={ticketStats.total}\n            pending={ticketStats.open}\n            resolved={ticketStats.resolved}\n            highPriority={ticketStats.highPriority}\n          />\n\n          {/* Recent Tickets */}\n          <div className=\"mt-8\">\n            <h2 className=\"text-lg font-medium text-gray-900\">Recent Support Tickets</h2>\n            <TicketTable tickets={tickets} />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomerDashboard;\n","size_bytes":6604},"attached_assets/CustomerDashboard_1754651822441.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport CustomerSidebar from '@/components/dashboard/CustomerSidebar';\nimport TicketStats from '@/components/dashboard/TicketStats';\nimport TicketTable from '@/components/dashboard/TicketTable';\nimport SubscriptionCard from '@/components/dashboard/SubscriptionCard';\nimport { Button } from '@/components/ui/button';\nimport { Spinner } from '@/components/ui/spinner';\nimport { PlusIcon } from 'lucide-react';\nimport { ticketApi, subscriptionApi, Ticket, Subscription } from '@/lib/api';\n\nconst CustomerDashboard = () => {\n  const { user } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  // Fetch tickets\n  const { \n    data: ticketsData, \n    isLoading: isLoadingTickets,\n    error: ticketsError\n  } = useQuery({ \n    queryKey: ['/api/tickets'],\n    refetchInterval: 30000 // Refetch every 30 seconds\n  });\n\n  // Fetch subscriptions\n  const { \n    data: subscriptionsData, \n    isLoading: isLoadingSubscriptions,\n    error: subscriptionsError\n  } = useQuery({ \n    queryKey: ['/api/subscriptions']\n  });\n\n  const tickets: Ticket[] = ticketsData?.tickets || [];\n  const subscriptions: Subscription[] = subscriptionsData?.subscriptions || [];\n  \n  const ticketStats = ticketApi.calculateStats(tickets);\n\n  // Handle mobile menu toggle\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  if (isLoadingTickets || isLoadingSubscriptions) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Spinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (ticketsError || subscriptionsError) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Error Loading Dashboard</h2>\n          <p className=\"text-gray-600\">\n            {(ticketsError as Error)?.message || (subscriptionsError as Error)?.message || \"Failed to load dashboard data\"}\n          </p>\n          <Button onClick={() => window.location.reload()} className=\"mt-4\">\n            Try Again\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Sidebar - hidden on mobile */}\n      <div className={`${isMobileMenuOpen ? 'block' : 'hidden'} md:block fixed inset-0 z-20 md:relative md:z-0`}>\n        <CustomerSidebar activePage=\"dashboard\" />\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-white shadow-sm\">\n          <div className=\"flex items-center justify-between h-16 px-4 sm:px-6 lg:px-8\">\n            <button className=\"md:hidden text-gray-500 focus:outline-none\" onClick={toggleMobileMenu}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n              </svg>\n            </button>\n\n            <div className=\"flex-1\"></div>\n\n            <div className=\"ml-4 flex items-center md:ml-6\">\n              <button className=\"p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\" />\n                </svg>\n              </button>\n\n              <div className=\"ml-3 relative\">\n                <div className=\"flex items-center\">\n                  <span className=\"hidden md:block mr-3 text-sm font-medium text-gray-700\">\n                    {user?.companyName || user?.fullName}\n                  </span>\n                  <div className=\"h-8 w-8 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white font-medium text-sm\">\n                      {user?.companyName \n                        ? user.companyName.split(\" \").map(n => n[0]).join(\"\").toUpperCase() \n                        : (user?.fullName || \"\").split(\" \").map(n => n[0]).join(\"\").toUpperCase()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <main className=\"flex-1 overflow-y-auto bg-gray-50 p-4 sm:p-6 lg:p-8\">\n          <div className=\"pb-5 border-b border-gray-200 sm:flex sm:items-center sm:justify-between\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Customer Dashboard</h1>\n            <div className=\"mt-3 sm:mt-0 sm:ml-4\">\n              <Button className=\"inline-flex items-center\">\n                <PlusIcon className=\"mr-2 h-4 w-4\" />\n                New Support Ticket\n              </Button>\n            </div>\n          </div>\n\n          {/* Subscription Information */}\n          <div className=\"mt-6\">\n            <h2 className=\"text-lg font-medium text-gray-900\">Your Subscriptions</h2>\n            <div className=\"mt-3 space-y-6\">\n              {subscriptions.length > 0 ? (\n                subscriptions.map((subscription) => (\n                  <SubscriptionCard \n                    key={subscription.id}\n                    subscription={subscription} \n                  />\n                ))\n              ) : (\n                <div className=\"bg-white rounded-lg shadow-md p-6 text-center\">\n                  <p className=\"text-gray-600\">You don't have any active subscriptions.</p>\n                  <Button variant=\"outline\" className=\"mt-4\">Contact Sales</Button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Ticket Stats */}\n          <TicketStats \n            total={ticketStats.total}\n            pending={ticketStats.open}\n            resolved={ticketStats.resolved}\n            highPriority={ticketStats.highPriority}\n          />\n\n          {/* Recent Tickets */}\n          <div className=\"mt-8\">\n            <h2 className=\"text-lg font-medium text-gray-900\">Recent Support Tickets</h2>\n            <TicketTable tickets={tickets} />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomerDashboard;\n","size_bytes":6604},"attached_assets/CustomerSidebar_1754651777470.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { \n  LayoutDashboard, \n  TicketIcon, \n  Package, \n  FileText, \n  UserCircle,\n  Settings,\n  LogOut\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface CustomerSidebarProps {\n  activePage: string;\n}\n\nconst CustomerSidebar = ({ activePage }: CustomerSidebarProps) => {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleLogout = async () => {\n    await logout();\n    setLocation('/');\n  };\n  \n  const navLinks = [\n    {\n      name: 'Dashboard',\n      href: '/customer-dashboard',\n      icon: <LayoutDashboard className=\"h-5 w-5\" />,\n      id: 'dashboard'\n    },\n    {\n      name: 'Support Tickets',\n      href: '#',\n      icon: <TicketIcon className=\"h-5 w-5\" />,\n      id: 'tickets'\n    },\n    {\n      name: 'My Subscriptions',\n      href: '#',\n      icon: <Package className=\"h-5 w-5\" />,\n      id: 'subscriptions'\n    },\n    {\n      name: 'Invoices',\n      href: '#',\n      icon: <FileText className=\"h-5 w-5\" />,\n      id: 'invoices'\n    },\n    {\n      name: 'My Profile',\n      href: '#',\n      icon: <UserCircle className=\"h-5 w-5\" />,\n      id: 'profile'\n    },\n    {\n      name: 'Settings',\n      href: '#',\n      icon: <Settings className=\"h-5 w-5\" />,\n      id: 'settings'\n    }\n  ];\n\n  return (\n    <div className=\"bg-gray-800 text-white w-64 flex-shrink-0 h-screen flex flex-col\">\n      <div className=\"flex items-center justify-center h-16 border-b border-gray-700\">\n        <Link href=\"/\">\n          <a className=\"flex items-center\">\n            <div className=\"h-8 w-8 bg-white rounded flex items-center justify-center mr-2\">\n              <span className=\"text-primary font-bold text-lg\">T</span>\n            </div>\n            <span className=\"text-xl font-bold\">TeckNet</span>\n          </a>\n        </Link>\n      </div>\n      \n      <nav className=\"mt-5 flex-grow px-2\">\n        <div className=\"space-y-1\">\n          {navLinks.map((link) => {\n            const isActive = activePage === link.id;\n            return (\n              <Link key={link.id} href={link.href}>\n                <a className={`group flex items-center px-2 py-2 text-base font-medium rounded-md ${\n                  isActive \n                    ? 'bg-gray-900 text-white' \n                    : 'text-gray-300 hover:bg-gray-700 hover:text-white'\n                }`}>\n                  <span className=\"mr-3\">{link.icon}</span>\n                  {link.name}\n                </a>\n              </Link>\n            );\n          })}\n        </div>\n      </nav>\n      \n      <div className=\"p-4 border-t border-gray-700\">\n        <div className=\"flex items-center mb-4\">\n          <div className=\"h-10 w-10 rounded-full bg-primary flex items-center justify-center\">\n            <span className=\"text-white font-medium text-sm\">\n              {user?.companyName \n                ? user.companyName.split(\" \").map(n => n[0]).join(\"\").toUpperCase() \n                : (user?.fullName || \"\").split(\" \").map(n => n[0]).join(\"\").toUpperCase()}\n            </span>\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm font-medium text-white\">{user?.fullName}</p>\n            <p className=\"text-xs font-medium text-gray-300\">{user?.companyName}</p>\n          </div>\n        </div>\n        <Button \n          variant=\"outline\" \n          className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white flex items-center justify-center\"\n          onClick={handleLogout}\n        >\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          Log out\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomerSidebar;\n","size_bytes":3753},"attached_assets/EmployeeDashboard_1754626605361.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport EmployeeSidebar from '@/components/dashboard/EmployeeSidebar';\nimport TicketStats from '@/components/dashboard/TicketStats';\nimport TicketTable from '@/components/dashboard/TicketTable';\nimport AppLinkCard from '@/components/dashboard/AppLinkCard';\nimport { Spinner } from '@/components/ui/spinner';\nimport { Button } from '@/components/ui/button';\nimport { PlusIcon } from 'lucide-react';\nimport { ticketApi, appLinkApi, ApplicationLink, Ticket } from '@/lib/api';\n\nconst EmployeeDashboard = () => {\n  const { user } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  // Fetch tickets\n  const { \n    data: ticketsData, \n    isLoading: isLoadingTickets,\n    error: ticketsError\n  } = useQuery({ \n    queryKey: ['/api/tickets'],\n    refetchInterval: 30000 // Refetch every 30 seconds\n  });\n\n  // Fetch application links\n  const { \n    data: appLinksData, \n    isLoading: isLoadingAppLinks,\n    error: appLinksError\n  } = useQuery({ \n    queryKey: ['/api/application-links']\n  });\n\n  const tickets: Ticket[] = ticketsData?.tickets || [];\n  const appLinks: ApplicationLink[] = appLinksData?.links || [];\n  \n  const ticketStats = ticketApi.calculateStats(tickets);\n\n  // Handle mobile menu toggle\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  if (isLoadingTickets || isLoadingAppLinks) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Spinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (ticketsError || appLinksError) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Error Loading Dashboard</h2>\n          <p className=\"text-gray-600\">\n            {(ticketsError as Error)?.message || (appLinksError as Error)?.message || \"Failed to load dashboard data\"}\n          </p>\n          <Button onClick={() => window.location.reload()} className=\"mt-4\">\n            Try Again\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Sidebar - hidden on mobile */}\n      <div className={`${isMobileMenuOpen ? 'block' : 'hidden'} md:block fixed inset-0 z-20 md:relative md:z-0`}>\n        <EmployeeSidebar activePage=\"dashboard\" />\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-white shadow-sm\">\n          <div className=\"flex items-center justify-between h-16 px-4 sm:px-6 lg:px-8\">\n            <button className=\"md:hidden text-gray-500 focus:outline-none\" onClick={toggleMobileMenu}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n              </svg>\n            </button>\n\n            <div className=\"flex-1\"></div>\n\n            <div className=\"ml-4 flex items-center md:ml-6\">\n              <button className=\"p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\" />\n                </svg>\n              </button>\n\n              <div className=\"ml-3 relative\">\n                <div className=\"flex items-center\">\n                  <span className=\"hidden md:block mr-3 text-sm font-medium text-gray-700\">\n                    {user?.fullName || user?.username}\n                  </span>\n                  <div className=\"h-8 w-8 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white font-medium text-sm\">\n                      {(user?.fullName || user?.username || \"\").split(\" \").map(n => n[0]).join(\"\").toUpperCase()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <main className=\"flex-1 overflow-y-auto bg-gray-50 p-4 sm:p-6 lg:p-8\">\n          <div className=\"pb-5 border-b border-gray-200 sm:flex sm:items-center sm:justify-between\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Employee Dashboard</h1>\n            <div className=\"mt-3 sm:mt-0 sm:ml-4\">\n              <Button className=\"inline-flex items-center\">\n                <PlusIcon className=\"mr-2 h-4 w-4\" />\n                New Ticket\n              </Button>\n            </div>\n          </div>\n\n          {/* Application Links */}\n          <div className=\"mt-6\">\n            <h2 className=\"text-lg font-medium text-gray-900\">Applications</h2>\n            <div className=\"mt-3 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-5\">\n              {appLinks.map((app) => (\n                <AppLinkCard \n                  key={app.id}\n                  name={app.name}\n                  icon={app.icon}\n                  url={app.url}\n                />\n              ))}\n            </div>\n          </div>\n\n          {/* Ticket Stats */}\n          <TicketStats \n            total={ticketStats.total}\n            pending={ticketStats.open}\n            resolved={ticketStats.resolved}\n            highPriority={ticketStats.highPriority}\n          />\n\n          {/* Recent Tickets */}\n          <div className=\"mt-8\">\n            <h2 className=\"text-lg font-medium text-gray-900\">Recent Tickets</h2>\n            <TicketTable tickets={tickets} />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeDashboard;\n","size_bytes":6112},"attached_assets/EmployeeDashboard_1754651822441.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport EmployeeSidebar from '@/components/dashboard/EmployeeSidebar';\nimport TicketStats from '@/components/dashboard/TicketStats';\nimport TicketTable from '@/components/dashboard/TicketTable';\nimport AppLinkCard from '@/components/dashboard/AppLinkCard';\nimport { Spinner } from '@/components/ui/spinner';\nimport { Button } from '@/components/ui/button';\nimport { PlusIcon } from 'lucide-react';\nimport { ticketApi, appLinkApi, ApplicationLink, Ticket } from '@/lib/api';\n\nconst EmployeeDashboard = () => {\n  const { user } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  // Fetch tickets\n  const { \n    data: ticketsData, \n    isLoading: isLoadingTickets,\n    error: ticketsError\n  } = useQuery({ \n    queryKey: ['/api/tickets'],\n    refetchInterval: 30000 // Refetch every 30 seconds\n  });\n\n  // Fetch application links\n  const { \n    data: appLinksData, \n    isLoading: isLoadingAppLinks,\n    error: appLinksError\n  } = useQuery({ \n    queryKey: ['/api/application-links']\n  });\n\n  const tickets: Ticket[] = ticketsData?.tickets || [];\n  const appLinks: ApplicationLink[] = appLinksData?.links || [];\n  \n  const ticketStats = ticketApi.calculateStats(tickets);\n\n  // Handle mobile menu toggle\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  if (isLoadingTickets || isLoadingAppLinks) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Spinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (ticketsError || appLinksError) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Error Loading Dashboard</h2>\n          <p className=\"text-gray-600\">\n            {(ticketsError as Error)?.message || (appLinksError as Error)?.message || \"Failed to load dashboard data\"}\n          </p>\n          <Button onClick={() => window.location.reload()} className=\"mt-4\">\n            Try Again\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Sidebar - hidden on mobile */}\n      <div className={`${isMobileMenuOpen ? 'block' : 'hidden'} md:block fixed inset-0 z-20 md:relative md:z-0`}>\n        <EmployeeSidebar activePage=\"dashboard\" />\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-white shadow-sm\">\n          <div className=\"flex items-center justify-between h-16 px-4 sm:px-6 lg:px-8\">\n            <button className=\"md:hidden text-gray-500 focus:outline-none\" onClick={toggleMobileMenu}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n              </svg>\n            </button>\n\n            <div className=\"flex-1\"></div>\n\n            <div className=\"ml-4 flex items-center md:ml-6\">\n              <button className=\"p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\" />\n                </svg>\n              </button>\n\n              <div className=\"ml-3 relative\">\n                <div className=\"flex items-center\">\n                  <span className=\"hidden md:block mr-3 text-sm font-medium text-gray-700\">\n                    {user?.fullName || user?.username}\n                  </span>\n                  <div className=\"h-8 w-8 rounded-full bg-primary flex items-center justify-center\">\n                    <span className=\"text-white font-medium text-sm\">\n                      {(user?.fullName || user?.username || \"\").split(\" \").map(n => n[0]).join(\"\").toUpperCase()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <main className=\"flex-1 overflow-y-auto bg-gray-50 p-4 sm:p-6 lg:p-8\">\n          <div className=\"pb-5 border-b border-gray-200 sm:flex sm:items-center sm:justify-between\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Employee Dashboard</h1>\n            <div className=\"mt-3 sm:mt-0 sm:ml-4\">\n              <Button className=\"inline-flex items-center\">\n                <PlusIcon className=\"mr-2 h-4 w-4\" />\n                New Ticket\n              </Button>\n            </div>\n          </div>\n\n          {/* Application Links */}\n          <div className=\"mt-6\">\n            <h2 className=\"text-lg font-medium text-gray-900\">Applications</h2>\n            <div className=\"mt-3 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-5\">\n              {appLinks.map((app) => (\n                <AppLinkCard \n                  key={app.id}\n                  name={app.name}\n                  icon={app.icon}\n                  url={app.url}\n                />\n              ))}\n            </div>\n          </div>\n\n          {/* Ticket Stats */}\n          <TicketStats \n            total={ticketStats.total}\n            pending={ticketStats.open}\n            resolved={ticketStats.resolved}\n            highPriority={ticketStats.highPriority}\n          />\n\n          {/* Recent Tickets */}\n          <div className=\"mt-8\">\n            <h2 className=\"text-lg font-medium text-gray-900\">Recent Tickets</h2>\n            <TicketTable tickets={tickets} />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeDashboard;\n","size_bytes":6112},"attached_assets/EmployeeSidebar_1754651777470.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { \n  LayoutDashboard, \n  TicketIcon, \n  Users, \n  FolderIcon, \n  Settings,\n  Database,\n  Bug,\n  Calendar,\n  FileText,\n  BarChart,\n  LogOut\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface EmployeeSidebarProps {\n  activePage: string;\n}\n\nconst EmployeeSidebar = ({ activePage }: EmployeeSidebarProps) => {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleLogout = async () => {\n    await logout();\n    setLocation('/');\n  };\n\n  const isAdmin = user?.role === 'admin';\n  \n  const mainLinks = [\n    {\n      name: 'Dashboard',\n      href: isAdmin ? '/admin-dashboard' : '/employee-dashboard',\n      icon: <LayoutDashboard className=\"h-5 w-5\" />,\n      id: 'dashboard'\n    },\n    {\n      name: 'Tickets',\n      href: '#',\n      icon: <TicketIcon className=\"h-5 w-5\" />,\n      id: 'tickets'\n    },\n    {\n      name: 'Team',\n      href: '#',\n      icon: <Users className=\"h-5 w-5\" />,\n      id: 'team'\n    },\n    {\n      name: 'Documents',\n      href: '#',\n      icon: <FolderIcon className=\"h-5 w-5\" />,\n      id: 'documents'\n    },\n    {\n      name: 'Settings',\n      href: '#',\n      icon: <Settings className=\"h-5 w-5\" />,\n      id: 'settings'\n    }\n  ];\n\n  const applicationLinks = [\n    {\n      name: 'CRM System',\n      href: 'https://crm.tecknet.ca',\n      icon: <Database className=\"h-5 w-5\" />,\n      id: 'crm'\n    },\n    {\n      name: 'Bug Tracker',\n      href: 'https://bugs.tecknet.ca',\n      icon: <Bug className=\"h-5 w-5\" />,\n      id: 'bug-tracker'\n    },\n    {\n      name: 'Calendar',\n      href: 'https://calendar.tecknet.ca',\n      icon: <Calendar className=\"h-5 w-5\" />,\n      id: 'calendar'\n    },\n    {\n      name: 'Documentation',\n      href: 'https://docs.tecknet.ca',\n      icon: <FileText className=\"h-5 w-5\" />,\n      id: 'documentation'\n    },\n    {\n      name: 'Analytics',\n      href: 'https://analytics.tecknet.ca',\n      icon: <BarChart className=\"h-5 w-5\" />,\n      id: 'analytics'\n    }\n  ];\n\n  return (\n    <div className=\"bg-gray-800 text-white w-64 flex-shrink-0 h-screen flex flex-col\">\n      <div className=\"flex items-center justify-center h-16 border-b border-gray-700\">\n        <Link href=\"/\">\n          <a className=\"flex items-center\">\n            <div className=\"h-8 w-8 bg-white rounded flex items-center justify-center mr-2\">\n              <span className=\"text-primary font-bold text-lg\">T</span>\n            </div>\n            <span className=\"text-xl font-bold\">TeckNet</span>\n          </a>\n        </Link>\n      </div>\n      \n      <nav className=\"mt-5 flex-grow px-2\">\n        <div className=\"space-y-1\">\n          {mainLinks.map((link) => {\n            const isActive = activePage === link.id;\n            return (\n              <Link key={link.id} href={link.href}>\n                <a className={`group flex items-center px-2 py-2 text-base font-medium rounded-md ${\n                  isActive \n                    ? 'bg-gray-900 text-white' \n                    : 'text-gray-300 hover:bg-gray-700 hover:text-white'\n                }`}>\n                  <span className=\"mr-3\">{link.icon}</span>\n                  {link.name}\n                </a>\n              </Link>\n            );\n          })}\n        </div>\n        \n        <div className=\"mt-10\">\n          <h3 className=\"px-3 text-xs font-semibold text-gray-400 uppercase tracking-wider\">\n            Applications\n          </h3>\n          <div className=\"mt-3 space-y-1\">\n            {applicationLinks.map((link) => (\n              <a \n                key={link.id} \n                href={link.href} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"group flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-300 hover:bg-gray-700 hover:text-white\"\n              >\n                <span className=\"mr-3\">{link.icon}</span>\n                {link.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      </nav>\n      \n      <div className=\"p-4 border-t border-gray-700\">\n        <div className=\"flex items-center mb-4\">\n          <div className=\"h-10 w-10 rounded-full bg-primary flex items-center justify-center\">\n            <span className=\"text-white font-medium text-sm\">\n              {(user?.fullName || user?.username || \"\").split(\" \").map(n => n[0]).join(\"\").toUpperCase()}\n            </span>\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm font-medium text-white\">{user?.fullName || user?.username}</p>\n            <p className=\"text-xs font-medium text-gray-300\">{isAdmin ? 'Administrator' : 'Employee'}</p>\n          </div>\n        </div>\n        <Button \n          variant=\"outline\" \n          className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white flex items-center justify-center\"\n          onClick={handleLogout}\n        >\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          Log out\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeSidebar;\n","size_bytes":5154},"attached_assets/Footer_1754626569022.tsx":{"content":"import { Link } from 'wouter';\n\nconst Footer = () => {\n  return (\n    <footer className=\"bg-gray-800\">\n      <div className=\"max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"col-span-1 md:col-span-1\">\n            <div className=\"flex items-center\">\n              <div className=\"h-10 w-10 bg-white rounded flex items-center justify-center mr-3\">\n                <span className=\"text-primary font-bold text-xl\">T</span>\n              </div>\n              <span className=\"text-2xl font-bold text-white\">TeckNet</span>\n            </div>\n            <p className=\"mt-4 text-gray-300\">\n              Delivering premium software solutions since 2010.\n            </p>\n            <div className=\"mt-6 flex space-x-6\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-white\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\" className=\"h-5 w-5\" fill=\"currentColor\">\n                  <path d=\"M279.14 288l14.22-92.66h-88.91v-60.13c0-25.35 12.42-50.06 52.24-50.06h40.42V6.26S260.43 0 225.36 0c-73.22 0-121.08 44.38-121.08 124.72v70.62H22.89V288h81.39v224h100.17V288z\"/>\n                </svg>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" className=\"h-5 w-5\" fill=\"currentColor\">\n                  <path d=\"M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z\"/>\n                </svg>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\" className=\"h-5 w-5\" fill=\"currentColor\">\n                  <path d=\"M100.28 448H7.4V148.9h92.88zM53.79 108.1C24.09 108.1 0 83.5 0 53.8a53.79 53.79 0 0 1 107.58 0c0 29.7-24.1 54.3-53.79 54.3zM447.9 448h-92.68V302.4c0-34.7-.7-79.2-48.29-79.2-48.29 0-55.69 37.7-55.69 76.7V448h-92.78V148.9h89.08v40.8h1.3c12.4-23.5 42.69-48.3 87.88-48.3 94 0 111.28 61.9 111.28 142.3V448z\"/>\n                </svg>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 496 512\" className=\"h-5 w-5\" fill=\"currentColor\">\n                  <path d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-400 uppercase tracking-wider\">Company</h3>\n            <ul className=\"mt-4 space-y-4\">\n              <li><Link href=\"/about\"><a className=\"text-base text-gray-300 hover:text-white\">About</a></Link></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Careers</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Blog</a></li>\n              <li><Link href=\"/contact\"><a className=\"text-base text-gray-300 hover:text-white\">Contact</a></Link></li>\n            </ul>\n          </div>\n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-400 uppercase tracking-wider\">Services</h3>\n            <ul className=\"mt-4 space-y-4\">\n              <li><Link href=\"/services\"><a className=\"text-base text-gray-300 hover:text-white\">Software Development</a></Link></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Mobile Apps</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Cloud Solutions</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Consulting</a></li>\n            </ul>\n          </div>\n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-400 uppercase tracking-wider\">Legal</h3>\n            <ul className=\"mt-4 space-y-4\">\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Privacy</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Terms</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Cookie Policy</a></li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"mt-12 border-t border-gray-700 pt-8\">\n          <p className=\"text-base text-gray-400 text-center\">\n            &copy; {new Date().getFullYear()} TeckNet. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","size_bytes":6543},"attached_assets/LoginModal_1754626569022.tsx":{"content":"import { useState } from 'react';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { employeeLoginSchema, customerLoginSchema } from '@shared/schema';\nimport { useLocation } from 'wouter';\n\ntype LoginModalProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onRegisterClick: () => void;\n};\n\nconst employeeLoginFormSchema = employeeLoginSchema;\nconst customerLoginFormSchema = customerLoginSchema;\n\nconst LoginModal = ({ isOpen, onClose, onRegisterClick }: LoginModalProps) => {\n  const [activeTab, setActiveTab] = useState('employee');\n  const { toast } = useToast();\n  const { loginCustomer, loginEmployee } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Employee login form\n  const employeeForm = useForm<z.infer<typeof employeeLoginFormSchema>>({\n    resolver: zodResolver(employeeLoginFormSchema),\n    defaultValues: {\n      username: '',\n      password: '',\n    },\n  });\n\n  // Customer login form\n  const customerForm = useForm<z.infer<typeof customerLoginFormSchema>>({\n    resolver: zodResolver(customerLoginFormSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n    },\n  });\n\n  const onEmployeeSubmit = async (data: z.infer<typeof employeeLoginFormSchema>) => {\n    try {\n      const success = await loginEmployee(data);\n      if (success) {\n        onClose();\n        toast({\n          title: 'Login successful',\n          description: 'Welcome back to TeckNet!',\n        });\n        \n        // Navigate to employee dashboard\n        if (data.username === 'admin') {\n          setLocation('/admin-dashboard');\n        } else {\n          setLocation('/employee-dashboard');\n        }\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Login failed',\n        description: error.message || 'Invalid credentials',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const onCustomerSubmit = async (data: z.infer<typeof customerLoginFormSchema>) => {\n    try {\n      const success = await loginCustomer(data);\n      if (success) {\n        onClose();\n        toast({\n          title: 'Login successful',\n          description: 'Welcome back to TeckNet!',\n        });\n        \n        // Navigate to customer dashboard\n        setLocation('/customer-dashboard');\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Login failed',\n        description: error.message || 'Invalid credentials',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold\">Login to TeckNet</DialogTitle>\n          <DialogDescription>\n            Access your account or register for a new one.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Tabs defaultValue=\"employee\" value={activeTab} onValueChange={setActiveTab} className=\"mt-4\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"employee\">Employee Login</TabsTrigger>\n            <TabsTrigger value=\"customer\">Customer Login</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"employee\" className=\"mt-4\">\n            <Form {...employeeForm}>\n              <form onSubmit={employeeForm.handleSubmit(onEmployeeSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={employeeForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter your AD username\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={employeeForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Enter your password\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button type=\"submit\" className=\"w-full mt-4\">\n                  Sign In with AD\n                </Button>\n              </form>\n            </Form>\n          </TabsContent>\n          \n          <TabsContent value=\"customer\" className=\"mt-4\">\n            <Form {...customerForm}>\n              <form onSubmit={customerForm.handleSubmit(onCustomerSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={customerForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"Enter your email\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={customerForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Enter your password\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex items-center justify-between\">\n                  <FormField\n                    control={customerForm.control}\n                    name=\"rememberMe\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center space-x-2 space-y-0\">\n                        <FormControl>\n                          <Checkbox \n                            checked={field.value} \n                            onCheckedChange={field.onChange} \n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm font-normal\">Remember me</FormLabel>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <a href=\"#\" className=\"text-sm font-medium text-primary hover:text-primary-dark\">\n                    Forgot password?\n                  </a>\n                </div>\n                \n                <Button type=\"submit\" className=\"w-full\">\n                  Sign In\n                </Button>\n                \n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={onRegisterClick}\n                >\n                  Register Account\n                </Button>\n              </form>\n            </Form>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default LoginModal;\n","size_bytes":7948},"attached_assets/Navbar_1754626569022.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/hooks/useAuth';\nimport LoginModal from './LoginModal';\nimport RegisterModal from './RegisterModal';\n\nconst Navbar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showLoginModal, setShowLoginModal] = useState(false);\n  const [showRegisterModal, setShowRegisterModal] = useState(false);\n  const { isAuthenticated, user, userType, logout } = useAuth();\n  const [location] = useLocation();\n\n  const toggleMobileMenu = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleLogout = async () => {\n    await logout();\n  };\n\n  const handleLoginClick = () => {\n    setShowLoginModal(true);\n  };\n\n  const handleRegisterModalOpen = () => {\n    setShowLoginModal(false);\n    setShowRegisterModal(true);\n  };\n\n  const getDashboardPath = () => {\n    if (user?.role === 'admin') {\n      return '/admin-dashboard';\n    } else if (userType === 'employee') {\n      return '/employee-dashboard';\n    } else {\n      return '/customer-dashboard';\n    }\n  };\n\n  return (\n    <>\n      <nav className=\"bg-white shadow-md relative z-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center\">\n                <Link href=\"/\">\n                  <div className=\"flex items-center cursor-pointer\">\n                    <div className=\"h-8 w-8 bg-primary rounded flex items-center justify-center mr-2\">\n                      <span className=\"text-white font-bold text-lg\">T</span>\n                    </div>\n                    <span className=\"text-xl font-bold text-primary\">TeckNet</span>\n                  </div>\n                </Link>\n              </div>\n              <div className=\"hidden sm:flex sm:space-x-8 sm:ml-10\">\n                <Link href=\"/\">\n                  <a className={`${location === '/' ? 'border-primary text-gray-900' : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'} inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}>\n                    Home\n                  </a>\n                </Link>\n                <Link href=\"/services\">\n                  <a className={`${location === '/services' ? 'border-primary text-gray-900' : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'} inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}>\n                    Services\n                  </a>\n                </Link>\n                <Link href=\"/solutions\">\n                  <a className={`${location === '/solutions' ? 'border-primary text-gray-900' : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'} inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}>\n                    Solutions\n                  </a>\n                </Link>\n                <Link href=\"/about\">\n                  <a className={`${location === '/about' ? 'border-primary text-gray-900' : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'} inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}>\n                    About Us\n                  </a>\n                </Link>\n                <Link href=\"/contact\">\n                  <a className={`${location === '/contact' ? 'border-primary text-gray-900' : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'} inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}>\n                    Contact\n                  </a>\n                </Link>\n              </div>\n            </div>\n            <div className=\"hidden sm:ml-6 sm:flex sm:items-center space-x-4\">\n              {isAuthenticated ? (\n                <>\n                  <Link href={getDashboardPath()}>\n                    <Button variant=\"outline\">Dashboard</Button>\n                  </Link>\n                  <Button onClick={handleLogout}>Log out</Button>\n                </>\n              ) : (\n                <>\n                  <Button variant=\"outline\" onClick={handleLoginClick}>Log in</Button>\n                  <Link href=\"/contact\">\n                    <Button>Contact Us</Button>\n                  </Link>\n                </>\n              )}\n            </div>\n            <div className=\"-mr-2 flex items-center sm:hidden\">\n              <button\n                onClick={toggleMobileMenu}\n                className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary\"\n              >\n                <span className=\"sr-only\">Open main menu</span>\n                {isOpen ? (\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                ) : (\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n                  </svg>\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile menu */}\n        <div className={`${isOpen ? 'block' : 'hidden'} sm:hidden`}>\n          <div className=\"pt-2 pb-3 space-y-1\">\n            <Link href=\"/\">\n              <a className={`${location === '/' ? 'bg-primary-light border-primary text-white' : 'border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800'} block pl-3 pr-4 py-2 border-l-4 text-base font-medium`}>\n                Home\n              </a>\n            </Link>\n            <Link href=\"/services\">\n              <a className={`${location === '/services' ? 'bg-primary-light border-primary text-white' : 'border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800'} block pl-3 pr-4 py-2 border-l-4 text-base font-medium`}>\n                Services\n              </a>\n            </Link>\n            <Link href=\"/solutions\">\n              <a className={`${location === '/solutions' ? 'bg-primary-light border-primary text-white' : 'border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800'} block pl-3 pr-4 py-2 border-l-4 text-base font-medium`}>\n                Solutions\n              </a>\n            </Link>\n            <Link href=\"/about\">\n              <a className={`${location === '/about' ? 'bg-primary-light border-primary text-white' : 'border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800'} block pl-3 pr-4 py-2 border-l-4 text-base font-medium`}>\n                About Us\n              </a>\n            </Link>\n            <Link href=\"/contact\">\n              <a className={`${location === '/contact' ? 'bg-primary-light border-primary text-white' : 'border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800'} block pl-3 pr-4 py-2 border-l-4 text-base font-medium`}>\n                Contact\n              </a>\n            </Link>\n          </div>\n          <div className=\"pt-4 pb-3 border-t border-gray-200 flex flex-col space-y-2 px-3\">\n            {isAuthenticated ? (\n              <>\n                <Link href={getDashboardPath()}>\n                  <Button className=\"w-full\" variant=\"outline\">Dashboard</Button>\n                </Link>\n                <Button className=\"w-full\" onClick={handleLogout}>Log out</Button>\n              </>\n            ) : (\n              <>\n                <Button className=\"w-full\" variant=\"outline\" onClick={handleLoginClick}>Log in</Button>\n                <Link href=\"/contact\">\n                  <Button className=\"w-full\">Contact Us</Button>\n                </Link>\n              </>\n            )}\n          </div>\n        </div>\n      </nav>\n\n      {/* Modals */}\n      <LoginModal \n        isOpen={showLoginModal} \n        onClose={() => setShowLoginModal(false)} \n        onRegisterClick={handleRegisterModalOpen}\n      />\n      \n      <RegisterModal \n        isOpen={showRegisterModal} \n        onClose={() => setShowRegisterModal(false)} \n      />\n    </>\n  );\n};\n\nexport default Navbar;\n","size_bytes":8528},"attached_assets/ProtectedRoute_1754626569022.tsx":{"content":"import { ReactNode, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Spinner } from '@/components/ui/spinner';\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  type: 'customer' | 'employee' | 'admin';\n}\n\nconst ProtectedRoute = ({ children, type }: ProtectedRouteProps) => {\n  const { isAuthenticated, isLoading, user, userType } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/');\n      return;\n    }\n\n    if (!isLoading && isAuthenticated) {\n      if (type === 'admin' && user?.role !== 'admin') {\n        setLocation('/');\n        return;\n      }\n\n      if (type === 'employee' && userType !== 'employee') {\n        setLocation('/');\n        return;\n      }\n\n      if (type === 'customer' && userType !== 'customer') {\n        setLocation('/');\n        return;\n      }\n    }\n  }, [isLoading, isAuthenticated, user, userType, type, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Spinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  if (type === 'admin' && user?.role !== 'admin') {\n    return null;\n  }\n\n  if (type === 'employee' && userType !== 'employee') {\n    return null;\n  }\n\n  if (type === 'customer' && userType !== 'customer') {\n    return null;\n  }\n\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;\n","size_bytes":1510},"attached_assets/RegisterModal_1754626569022.tsx":{"content":"import { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { customerRegistrationSchema } from '@shared/schema';\n\ntype RegisterModalProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst formSchema = customerRegistrationSchema;\n\nconst RegisterModal = ({ isOpen, onClose }: RegisterModalProps) => {\n  const { toast } = useToast();\n  const { registerCustomer } = useAuth();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      fullName: '',\n      companyName: '',\n      email: '',\n      phone: '',\n      password: '',\n      confirmPassword: '',\n    },\n  });\n\n  const onSubmit = async (data: z.infer<typeof formSchema>) => {\n    try {\n      const result = await registerCustomer(data);\n      \n      if (result.success) {\n        onClose();\n        toast({\n          title: 'Registration Successful',\n          description: result.message,\n        });\n      } else {\n        toast({\n          title: 'Registration Failed',\n          description: result.message,\n          variant: 'destructive',\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Registration Failed',\n        description: error.message || 'Something went wrong. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold\">Register as a Customer</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"fullName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Full Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your full name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"companyName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Company Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your company name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email Address</FormLabel>\n                  <FormControl>\n                    <Input type=\"email\" placeholder=\"your.email@example.com\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Phone Number</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your phone number\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input type=\"password\" placeholder=\"Create a password\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Confirm Password</FormLabel>\n                  <FormControl>\n                    <Input type=\"password\" placeholder=\"Confirm your password\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"mt-6\">\n              <p className=\"text-sm text-gray-500 mb-4\">\n                Your registration will be reviewed by our admin team before approval. You'll receive an email notification once your account is activated.\n              </p>\n              <Button type=\"submit\" className=\"w-full\">\n                Submit Registration\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default RegisterModal;\n","size_bytes":5400},"attached_assets/ServiceCard_1754626569022.tsx":{"content":"import { \n  Code, \n  Smartphone, \n  Cloud, \n  Database, \n  Settings, \n  Shield,\n  LucideIcon\n} from 'lucide-react';\n\ninterface ServiceCardProps {\n  icon: string;\n  title: string;\n  description: string;\n}\n\nconst ServiceCard = ({ icon, title, description }: ServiceCardProps) => {\n  const getIcon = (): JSX.Element => {\n    switch (icon) {\n      case 'code':\n        return <Code className=\"text-white text-xl\" />;\n      case 'smartphone':\n        return <Smartphone className=\"text-white text-xl\" />;\n      case 'cloud':\n        return <Cloud className=\"text-white text-xl\" />;\n      case 'database':\n        return <Database className=\"text-white text-xl\" />;\n      case 'settings':\n        return <Settings className=\"text-white text-xl\" />;\n      case 'shield':\n        return <Shield className=\"text-white text-xl\" />;\n      default:\n        return <Code className=\"text-white text-xl\" />;\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-50 p-6 rounded-lg shadow-md transition-all duration-300 hover:shadow-lg\">\n      <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mb-4\">\n        {getIcon()}\n      </div>\n      <h3 className=\"text-xl font-bold text-gray-900\">{title}</h3>\n      <p className=\"mt-2 text-gray-600\">\n        {description}\n      </p>\n    </div>\n  );\n};\n\nexport default ServiceCard;\n","size_bytes":1334},"attached_assets/TestimonialCard_1754626569022.tsx":{"content":"import { Star, StarHalf } from 'lucide-react';\n\ninterface TestimonialCardProps {\n  content: string;\n  author: string;\n  title: string;\n  rating: number;\n}\n\nconst TestimonialCard = ({ content, author, title, rating }: TestimonialCardProps) => {\n  // Create array of stars based on rating\n  const renderStars = () => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n    \n    // Add full stars\n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<Star key={`star-${i}`} className=\"fill-current text-accent\" />);\n    }\n    \n    // Add half star if needed\n    if (hasHalfStar) {\n      stars.push(<StarHalf key=\"half-star\" className=\"fill-current text-accent\" />);\n    }\n    \n    return stars;\n  };\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow-md\">\n      <div className=\"flex items-center mb-4\">\n        <div className=\"text-accent flex\">\n          {renderStars()}\n        </div>\n      </div>\n      <p className=\"text-gray-600 italic mb-4\">\n        \"{content}\"\n      </p>\n      <div className=\"flex items-center\">\n        <div className=\"h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center\">\n          <span className=\"text-gray-600 font-bold\">\n            {author.split(' ').map(name => name[0]).join('')}\n          </span>\n        </div>\n        <div className=\"ml-3\">\n          <h4 className=\"text-sm font-bold text-gray-900\">{author}</h4>\n          <p className=\"text-sm text-gray-500\">{title}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestimonialCard;\n","size_bytes":1576},"attached_assets/TicketService_1754651831579.ts":{"content":"import { apiRequest } from '@/lib/queryClient';\nimport { Ticket } from '@shared/schema';\n\nexport interface TicketFormData {\n  subject: string;\n  description: string;\n  priority?: 'low' | 'medium' | 'high' | 'critical';\n  status?: 'open' | 'in_progress' | 'pending' | 'resolved' | 'closed';\n}\n\nclass TicketService {\n  // Get all tickets for the current user\n  async getTickets(): Promise<Ticket[]> {\n    try {\n      const response = await apiRequest('GET', '/api/tickets');\n      const data = await response.json();\n      return data.tickets || [];\n    } catch (error) {\n      console.error('Failed to fetch tickets:', error);\n      throw error;\n    }\n  }\n\n  // Get a specific ticket by ID\n  async getTicketById(id: string): Promise<Ticket> {\n    try {\n      const response = await apiRequest('GET', `/api/tickets/${id}`);\n      const data = await response.json();\n      return data.ticket;\n    } catch (error) {\n      console.error(`Failed to fetch ticket ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Create a new ticket\n  async createTicket(ticketData: TicketFormData): Promise<Ticket> {\n    try {\n      const response = await apiRequest('POST', '/api/tickets', ticketData);\n      const data = await response.json();\n      return data.ticket;\n    } catch (error) {\n      console.error('Failed to create ticket:', error);\n      throw error;\n    }\n  }\n\n  // Update an existing ticket\n  async updateTicket(id: number, ticketData: Partial<TicketFormData>): Promise<Ticket> {\n    try {\n      const response = await apiRequest('PATCH', `/api/tickets/${id}`, ticketData);\n      const data = await response.json();\n      return data.ticket;\n    } catch (error) {\n      console.error(`Failed to update ticket ${id}:`, error);\n      throw error;\n    }\n  }\n}\n\nexport const ticketService = new TicketService();","size_bytes":1806},"attached_assets/TicketStats_1754651777470.tsx":{"content":"import { \n  Ticket, \n  Clock, \n  CheckCircle, \n  AlertTriangle \n} from 'lucide-react';\n\ninterface TicketStatsProps {\n  total: number;\n  pending: number;\n  resolved: number;\n  highPriority: number;\n}\n\nconst TicketStats = ({ total, pending, resolved, highPriority }: TicketStatsProps) => {\n  return (\n    <div className=\"mt-8\">\n      <h2 className=\"text-lg font-medium text-gray-900\">Ticket Dashboard</h2>\n      <div className=\"mt-3 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\n        <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n          <div className=\"p-5\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-md bg-blue-100 text-blue-600\">\n                <Ticket className=\"h-6 w-6\" />\n              </div>\n              <div className=\"ml-5\">\n                <div className=\"text-sm font-medium text-gray-500 truncate\">\n                  Total Tickets\n                </div>\n                <div className=\"mt-1 text-3xl font-semibold text-gray-900\">\n                  {total}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n          <div className=\"p-5\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-md bg-yellow-100 text-yellow-600\">\n                <Clock className=\"h-6 w-6\" />\n              </div>\n              <div className=\"ml-5\">\n                <div className=\"text-sm font-medium text-gray-500 truncate\">\n                  Pending Tickets\n                </div>\n                <div className=\"mt-1 text-3xl font-semibold text-gray-900\">\n                  {pending}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n          <div className=\"p-5\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-md bg-green-100 text-green-600\">\n                <CheckCircle className=\"h-6 w-6\" />\n              </div>\n              <div className=\"ml-5\">\n                <div className=\"text-sm font-medium text-gray-500 truncate\">\n                  Resolved Tickets\n                </div>\n                <div className=\"mt-1 text-3xl font-semibold text-gray-900\">\n                  {resolved}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n          <div className=\"p-5\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-md bg-red-100 text-red-600\">\n                <AlertTriangle className=\"h-6 w-6\" />\n              </div>\n              <div className=\"ml-5\">\n                <div className=\"text-sm font-medium text-gray-500 truncate\">\n                  High Priority\n                </div>\n                <div className=\"mt-1 text-3xl font-semibold text-gray-900\">\n                  {highPriority}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TicketStats;\n","size_bytes":3442},"attached_assets/TicketTable_1754651777470.tsx":{"content":"import { useState } from 'react';\nimport { \n  EyeIcon, \n  ChevronLeftIcon, \n  ChevronRightIcon \n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Ticket } from '@/lib/api';\n\ninterface TicketTableProps {\n  tickets: Ticket[];\n  isAdmin?: boolean;\n}\n\nconst TicketTable = ({ tickets, isAdmin = false }: TicketTableProps) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const ticketsPerPage = 10;\n  \n  // Get current tickets\n  const indexOfLastTicket = currentPage * ticketsPerPage;\n  const indexOfFirstTicket = indexOfLastTicket - ticketsPerPage;\n  const currentTickets = tickets.slice(indexOfFirstTicket, indexOfLastTicket);\n  \n  // Change page\n  const totalPages = Math.ceil(tickets.length / ticketsPerPage);\n  \n  const getStatusBadgeClass = (status: string) => {\n    switch (status) {\n      case 'open':\n        return 'bg-blue-100 text-blue-800';\n      case 'in_progress':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'resolved':\n        return 'bg-green-100 text-green-800';\n      case 'closed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n  \n  const getPriorityBadgeClass = (priority: string) => {\n    switch (priority) {\n      case 'low':\n        return 'bg-green-100 text-green-800';\n      case 'medium':\n        return 'bg-blue-100 text-blue-800';\n      case 'high':\n        return 'bg-red-100 text-red-800';\n      case 'critical':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n  \n  const formatDate = (date: Date) => {\n    const d = new Date(date);\n    const now = new Date();\n    \n    // If today, show time\n    if (d.getDate() === now.getDate() && \n        d.getMonth() === now.getMonth() && \n        d.getFullYear() === now.getFullYear()) {\n      return `Today, ${d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    }\n    \n    // If yesterday\n    const yesterday = new Date(now);\n    yesterday.setDate(now.getDate() - 1);\n    if (d.getDate() === yesterday.getDate() && \n        d.getMonth() === yesterday.getMonth() && \n        d.getFullYear() === yesterday.getFullYear()) {\n      return `Yesterday, ${d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    }\n    \n    // Otherwise show date\n    return d.toLocaleDateString();\n  };\n  \n  if (tickets.length === 0) {\n    return (\n      <div className=\"bg-white shadow overflow-hidden rounded-lg p-6 text-center\">\n        <p className=\"text-gray-500\">No tickets found.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white shadow overflow-hidden rounded-lg\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                ID\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Subject\n              </th>\n              {isAdmin && (\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Requester\n                </th>\n              )}\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Status\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Priority\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Last Updated\n              </th>\n              <th scope=\"col\" className=\"relative px-6 py-3\">\n                <span className=\"sr-only\">Actions</span>\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {currentTickets.map((ticket) => (\n              <tr key={ticket.id}>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  #{ticket.ticketId}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-primary\">\n                  {ticket.subject}\n                </td>\n                {isAdmin && (\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {ticket.userId ? \"Customer\" : \"Employee\"}\n                  </td>\n                )}\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusBadgeClass(ticket.status)}`}>\n                    {ticket.status.replace('_', ' ').charAt(0).toUpperCase() + ticket.status.replace('_', ' ').slice(1)}\n                  </span>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getPriorityBadgeClass(ticket.priority)}`}>\n                    {ticket.priority.charAt(0).toUpperCase() + ticket.priority.slice(1)}\n                  </span>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                  {formatDate(ticket.lastUpdated)}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary-dark flex items-center\">\n                    <EyeIcon className=\"h-4 w-4 mr-1\" />\n                    View\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      \n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6\">\n          <div className=\"flex-1 flex justify-between sm:hidden\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n              disabled={currentPage === 1}\n            >\n              Previous\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n              disabled={currentPage === totalPages}\n            >\n              Next\n            </Button>\n          </div>\n          <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-700\">\n                Showing <span className=\"font-medium\">{indexOfFirstTicket + 1}</span> to{' '}\n                <span className=\"font-medium\">\n                  {Math.min(indexOfLastTicket, tickets.length)}\n                </span>{' '}\n                of <span className=\"font-medium\">{tickets.length}</span> results\n              </p>\n            </div>\n            <div>\n              <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\" aria-label=\"Pagination\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\"\n                  onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                  disabled={currentPage === 1}\n                >\n                  <span className=\"sr-only\">Previous</span>\n                  <ChevronLeftIcon className=\"h-5 w-5\" />\n                </Button>\n                \n                {Array.from({ length: totalPages }, (_, i) => i + 1).map((number) => (\n                  <Button \n                    key={number}\n                    variant={currentPage === number ? \"default\" : \"outline\"} \n                    size=\"sm\" \n                    className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium\n                      ${currentPage === number\n                        ? 'bg-primary text-white' \n                        : 'bg-white text-gray-700 hover:bg-gray-50'\n                      }`}\n                    onClick={() => setCurrentPage(number)}\n                  >\n                    {number}\n                  </Button>\n                ))}\n                \n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\"\n                  onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                  disabled={currentPage === totalPages}\n                >\n                  <span className=\"sr-only\">Next</span>\n                  <ChevronRightIcon className=\"h-5 w-5\" />\n                </Button>\n              </nav>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TicketTable;\n","size_bytes":9479},"attached_assets/ad.txt_1754652532037.ts":{"content":"import { Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { employeeLoginSchema } from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nconst execPromise = promisify(exec);\n\n// Real AD authentication using Linux auth_pam\nexport async function authenticateWithAD(username: string, password: string): Promise<{\n  success: boolean;\n  user?: {\n    username: string;\n    email?: string;\n    fullName?: string;\n  };\n  error?: string;\n}> {\n  console.log(`[AD DEBUG] Attempting to authenticate user: ${username}`);\n  \n  try {\n    // Check if the provided username contains domain\n    const usernameOnly = username.includes('@') ? username.split('@')[0] : username;\n    \n    // First, try authenticating with system-level authentication\n    // This approach relies on the server being properly joined to the domain\n    // Using kerberos/SSSD which is already configured on your server\n    \n    // Create a simple script that returns user information if authentication succeeds\n    const scriptContent = `\n      getent passwd ${usernameOnly} | cut -d: -f1,5\n    `;\n    \n    // Write script to temporary file\n    const scriptPath = `/tmp/ad_auth_${Date.now()}.sh`;\n    await execPromise(`echo '${scriptContent}' > ${scriptPath} && chmod +x ${scriptPath}`);\n    \n    // Execute the script and check credentials via PAM\n    const { stdout } = await execPromise(`echo \"${password}\" | su - ${usernameOnly} -c \"${scriptPath}\" 2>/dev/null`);\n    \n    // Clean up\n    await execPromise(`rm ${scriptPath}`);\n    \n    if (stdout && stdout.trim()) {\n      console.log(`[AD DEBUG] Authentication successful for: ${username}`);\n      \n      // Parse user info (username and display name)\n      const [user, fullName] = stdout.trim().split(':');\n      \n      // Create email based on username and domain\n      const email = `${usernameOnly}@tecknet.ca`;\n      \n      return {\n        success: true,\n        user: {\n          username: usernameOnly,\n          email: email,\n          fullName: fullName || usernameOnly\n        }\n      };\n    }\n    \n    // If that fails, we'll fall back to specific test users for development/testing\n    // This code will only be reached if the system auth fails\n    if (username === \"john.doe\" && password === \"password123\") {\n      return {\n        success: true,\n        user: {\n          username: \"john.doe\",\n          email: \"john.doe@tecknet.ca\",\n          fullName: \"John Doe\"\n        }\n      };\n    } else if (username === \"jane.smith\" && password === \"password123\") {\n      return {\n        success: true,\n        user: {\n          username: \"jane.smith\",\n          email: \"jane.smith@tecknet.ca\",\n          fullName: \"Jane Smith\"\n        }\n      };\n    } else if (username === \"admin\" && password === \"admin123\") {\n      return {\n        success: true,\n        user: {\n          username: \"admin\",\n          email: \"admin@tecknet.ca\",\n          fullName: \"Admin User\"\n        }\n      };\n    }\n    \n    console.log(`[AD DEBUG] Authentication failed for: ${username}`);\n    return {\n      success: false,\n      error: \"Invalid AD credentials\"\n    };\n  } catch (error) {\n    console.error(`[AD DEBUG] Authentication error for ${username}:`, error);\n    return {\n      success: false,\n      error: \"Authentication error\"\n    };\n  }\n}\n\n// Login with AD credentials\nexport async function loginWithAD(req: Request, res: Response) {\n  try {\n    // Validate request data\n    const { username, password } = employeeLoginSchema.parse(req.body);\n    \n    // Authenticate with AD\n    const adResult = await authenticateWithAD(username, password);\n    \n    if (!adResult.success || !adResult.user) {\n      return res.status(401).json({ message: adResult.error || \"Authentication failed\" });\n    }\n    \n    // Check if AD user exists in our database\n    let adUser = await storage.getADUserByUsername(adResult.user.username);\n    \n    // If user doesn't exist in our database, create them\n    if (!adUser) {\n      adUser = await storage.createADUser({\n        username: adResult.user.username,\n        email: adResult.user.email,\n        fullName: adResult.user.fullName,\n        role: username === \"admin\" ? 'admin' : 'employee',\n        lastLogin: new Date(),\n      });\n    } else {\n      // Update last login time\n      adUser = await storage.updateADUser(adUser.id, { \n        lastLogin: new Date(),\n        email: adResult.user.email || adUser.email,\n        fullName: adResult.user.fullName || adUser.fullName\n      }) || adUser;\n    }\n    \n    // Set user in session\n    if (req.session) {\n      req.session.adUser = adUser;\n      req.session.isAuthenticated = true;\n    }\n    \n    // Return user data\n    return res.status(200).json({ user: adUser });\n  } catch (error) {\n    if (error instanceof ZodError) {\n      const validationError = fromZodError(error);\n      return res.status(400).json({ message: validationError.message });\n    }\n    console.error('AD Login error:', error);\n    return res.status(500).json({ message: \"Server error during AD login\" });\n  }\n}\n\n// Check if user is authenticated with AD\nexport function isADAuthenticated(req: Request, res: Response, next: Function) {\n  if (req.session && req.session.isAuthenticated && req.session.adUser) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Not authenticated with AD\" });\n}\n\n// Check if user is an admin\nexport function isADAdmin(req: Request, res: Response, next: Function) {\n  if (req.session && req.session.adUser && req.session.adUser.role === 'admin') {\n    return next();\n  }\n  return res.status(403).json({ message: \"Not authorized\" });\n}\n","size_bytes":5708},"attached_assets/ad_1754651967625.ts":{"content":"import { Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { employeeLoginSchema } from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nconst execPromise = promisify(exec);\n\n// Real AD authentication using Linux auth_pam\nexport async function authenticateWithAD(username: string, password: string): Promise<{\n  success: boolean;\n  user?: {\n    username: string;\n    email?: string;\n    fullName?: string;\n  };\n  error?: string;\n}> {\n  console.log(`[AD DEBUG] Attempting to authenticate user: ${username}`);\n  \n  try {\n    // Check if the provided username contains domain\n    const usernameOnly = username.includes('@') ? username.split('@')[0] : username;\n    \n    // First, try authenticating with system-level authentication\n    // This approach relies on the server being properly joined to the domain\n    // Using kerberos/SSSD which is already configured on your server\n    \n    // Create a simple script that returns user information if authentication succeeds\n    const scriptContent = `\n      getent passwd ${usernameOnly} | cut -d: -f1,5\n    `;\n    \n    // Write script to temporary file\n    const scriptPath = `/tmp/ad_auth_${Date.now()}.sh`;\n    await execPromise(`echo '${scriptContent}' > ${scriptPath} && chmod +x ${scriptPath}`);\n    \n    // Execute the script and check credentials via PAM\n    const { stdout } = await execPromise(`echo \"${password}\" | su - ${usernameOnly} -c \"${scriptPath}\" 2>/dev/null`);\n    \n    // Clean up\n    await execPromise(`rm ${scriptPath}`);\n    \n    if (stdout && stdout.trim()) {\n      console.log(`[AD DEBUG] Authentication successful for: ${username}`);\n      \n      // Parse user info (username and display name)\n      const [user, fullName] = stdout.trim().split(':');\n      \n      // Create email based on username and domain\n      const email = `${usernameOnly}@tecknet.ca`;\n      \n      return {\n        success: true,\n        user: {\n          username: usernameOnly,\n          email: email,\n          fullName: fullName || usernameOnly\n        }\n      };\n    }\n    \n    // If that fails, we'll fall back to specific test users for development/testing\n    // This code will only be reached if the system auth fails\n    if (username === \"john.doe\" && password === \"password123\") {\n      return {\n        success: true,\n        user: {\n          username: \"john.doe\",\n          email: \"john.doe@tecknet.ca\",\n          fullName: \"John Doe\"\n        }\n      };\n    } else if (username === \"jane.smith\" && password === \"password123\") {\n      return {\n        success: true,\n        user: {\n          username: \"jane.smith\",\n          email: \"jane.smith@tecknet.ca\",\n          fullName: \"Jane Smith\"\n        }\n      };\n    } else if (username === \"admin\" && password === \"admin123\") {\n      return {\n        success: true,\n        user: {\n          username: \"admin\",\n          email: \"admin@tecknet.ca\",\n          fullName: \"Admin User\"\n        }\n      };\n    }\n    \n    console.log(`[AD DEBUG] Authentication failed for: ${username}`);\n    return {\n      success: false,\n      error: \"Invalid AD credentials\"\n    };\n  } catch (error) {\n    console.error(`[AD DEBUG] Authentication error for ${username}:`, error);\n    return {\n      success: false,\n      error: \"Authentication error\"\n    };\n  }\n}\n\n// Login with AD credentials\nexport async function loginWithAD(req: Request, res: Response) {\n  try {\n    // Validate request data\n    const { username, password } = employeeLoginSchema.parse(req.body);\n    \n    // Authenticate with AD\n    const adResult = await authenticateWithAD(username, password);\n    \n    if (!adResult.success || !adResult.user) {\n      return res.status(401).json({ message: adResult.error || \"Authentication failed\" });\n    }\n    \n    // Check if AD user exists in our database\n    let adUser = await storage.getADUserByUsername(adResult.user.username);\n    \n    // If user doesn't exist in our database, create them\n    if (!adUser) {\n      adUser = await storage.createADUser({\n        username: adResult.user.username,\n        email: adResult.user.email,\n        fullName: adResult.user.fullName,\n        role: username === \"admin\" ? 'admin' : 'employee',\n        lastLogin: new Date(),\n      });\n    } else {\n      // Update last login time\n      adUser = await storage.updateADUser(adUser.id, { \n        lastLogin: new Date(),\n        email: adResult.user.email || adUser.email,\n        fullName: adResult.user.fullName || adUser.fullName\n      }) || adUser;\n    }\n    \n    // Set user in session\n    if (req.session) {\n      req.session.adUser = adUser;\n      req.session.isAuthenticated = true;\n    }\n    \n    // Return user data\n    return res.status(200).json({ user: adUser });\n  } catch (error) {\n    if (error instanceof ZodError) {\n      const validationError = fromZodError(error);\n      return res.status(400).json({ message: validationError.message });\n    }\n    console.error('AD Login error:', error);\n    return res.status(500).json({ message: \"Server error during AD login\" });\n  }\n}\n\n// Check if user is authenticated with AD\nexport function isADAuthenticated(req: Request, res: Response, next: Function) {\n  if (req.session && req.session.isAuthenticated && req.session.adUser) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Not authenticated with AD\" });\n}\n\n// Check if user is an admin\nexport function isADAdmin(req: Request, res: Response, next: Function) {\n  if (req.session && req.session.adUser && req.session.adUser.role === 'admin') {\n    return next();\n  }\n  return res.status(403).json({ message: \"Not authorized\" });\n}\n","size_bytes":5708},"attached_assets/api_1754651812391.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface AuthResponse {\n  user: {\n    id: number;\n    username: string;\n    email?: string;\n    fullName?: string;\n    companyName?: string;\n    role: string;\n    status?: string;\n  };\n  type?: string;\n}\n\nexport interface RegistrationData {\n  fullName: string;\n  companyName: string;\n  email: string;\n  phone: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface CustomerLoginData {\n  email: string;\n  password: string;\n  rememberMe?: boolean;\n}\n\nexport interface EmployeeLoginData {\n  username: string;\n  password: string;\n}\n\nexport interface ApiError {\n  message: string;\n}\n\nexport interface Ticket {\n  id: number;\n  ticketId: string;\n  subject: string;\n  description: string;\n  status: 'open' | 'in_progress' | 'pending' | 'resolved' | 'closed';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  userId?: number;\n  adUserId?: number;\n  assignedTo?: number;\n  createdAt: Date;\n  updatedAt: Date;\n  lastUpdated: Date;\n}\n\nexport interface Subscription {\n  id: number;\n  userId: number;\n  name: string;\n  description?: string;\n  status: string;\n  renewalDate?: Date;\n  licenseType?: string;\n  subscriptionId: string;\n}\n\nexport interface ApplicationLink {\n  id: number;\n  name: string;\n  url: string;\n  description?: string;\n  icon: string;\n  isActive: boolean;\n  order: number;\n}\n\nexport interface TicketStats {\n  total: number;\n  open: number;\n  resolved: number;\n  highPriority: number;\n}\n\nexport interface UserForApproval {\n  id: number;\n  username: string;\n  email: string;\n  fullName: string;\n  companyName?: string;\n  phone?: string;\n  createdAt: Date;\n}\n\n// Authentication API\nexport const authApi = {\n  // Register a new customer\n  register: async (data: RegistrationData): Promise<{ message: string }> => {\n    const response = await apiRequest('POST', '/api/auth/register', data);\n    return response.json();\n  },\n  \n  // Login as a customer\n  customerLogin: async (data: CustomerLoginData): Promise<AuthResponse> => {\n    const response = await apiRequest('POST', '/api/auth/login', data);\n    return response.json();\n  },\n  \n  // Login as an employee using AD credentials\n  employeeLogin: async (data: EmployeeLoginData): Promise<AuthResponse> => {\n    const response = await apiRequest('POST', '/api/auth/ad-login', data);\n    return response.json();\n  },\n  \n  // Get current user\n  getCurrentUser: async (): Promise<AuthResponse> => {\n    const response = await apiRequest('GET', '/api/me');\n    return response.json();\n  },\n  \n  // Logout\n  logout: async (): Promise<{ message: string }> => {\n    const response = await apiRequest('POST', '/api/auth/logout');\n    return response.json();\n  }\n};\n\n// Ticket API\nexport const ticketApi = {\n  // Get tickets for current user\n  getTickets: async (): Promise<{ tickets: Ticket[] }> => {\n    const response = await apiRequest('GET', '/api/tickets');\n    return response.json();\n  },\n  \n  // Create a ticket\n  createTicket: async (data: Partial<Ticket>): Promise<{ ticket: Ticket }> => {\n    const response = await apiRequest('POST', '/api/tickets', data);\n    return response.json();\n  },\n  \n  // Update a ticket\n  updateTicket: async (id: number, data: Partial<Ticket>): Promise<{ ticket: Ticket }> => {\n    const response = await apiRequest('PATCH', `/api/tickets/${id}`, data);\n    return response.json();\n  },\n  \n  // Calculate ticket stats from ticket list\n  calculateStats: (tickets: Ticket[]): TicketStats => {\n    return {\n      total: tickets.length,\n      open: tickets.filter(t => t.status === 'open' || t.status === 'in_progress').length,\n      resolved: tickets.filter(t => t.status === 'resolved').length,\n      highPriority: tickets.filter(t => t.priority === 'high' || t.priority === 'critical').length\n    };\n  }\n};\n\n// Zammad integration API\nexport const zammadApi = {\n  // Get tickets from Zammad for current user\n  getZammadTickets: async (): Promise<{ tickets: Ticket[] }> => {\n    const response = await apiRequest('GET', '/api/tickets'); // Using the Zammad controller\n    return response.json();\n  },\n  \n  // Get a specific ticket from Zammad\n  getZammadTicket: async (id: string): Promise<{ ticket: Ticket }> => {\n    const response = await apiRequest('GET', `/api/tickets/${id}`);\n    return response.json();\n  },\n  \n  // Create a ticket in Zammad\n  createZammadTicket: async (data: { \n    subject: string; \n    description: string; \n    priority?: 'low' | 'medium' | 'high' | 'critical';\n    status?: 'open' | 'in_progress' | 'pending' | 'resolved' | 'closed';\n  }): Promise<{ ticket: Ticket }> => {\n    const response = await apiRequest('POST', '/api/tickets', data);\n    return response.json();\n  },\n  \n  // Update a ticket in Zammad\n  updateZammadTicket: async (id: number, data: Partial<Ticket>): Promise<{ ticket: Ticket }> => {\n    const response = await apiRequest('PATCH', `/api/tickets/${id}`, data);\n    return response.json();\n  }\n};\n\n// Subscription API\nexport const subscriptionApi = {\n  // Get subscriptions for current user\n  getSubscriptions: async (): Promise<{ subscriptions: Subscription[] }> => {\n    const response = await apiRequest('GET', '/api/subscriptions');\n    return response.json();\n  }\n};\n\n// Application links API\nexport const appLinkApi = {\n  // Get application links\n  getApplicationLinks: async (): Promise<{ links: ApplicationLink[] }> => {\n    const response = await apiRequest('GET', '/api/application-links');\n    return response.json();\n  }\n};\n\n// Admin API\nexport const adminApi = {\n  // Get pending customers\n  getPendingCustomers: async (): Promise<{ users: UserForApproval[] }> => {\n    const response = await apiRequest('GET', '/api/admin/pending-customers');\n    return response.json();\n  },\n  \n  // Approve a customer\n  approveCustomer: async (userId: number): Promise<{ user: UserForApproval }> => {\n    const response = await apiRequest('POST', `/api/admin/approve-customer/${userId}`);\n    return response.json();\n  },\n  \n  // Reset application links (re-initialize them with the default set)\n  resetApplicationLinks: async (): Promise<{ message: string, links: ApplicationLink[] }> => {\n    const response = await apiRequest('POST', '/api/admin/reset-app-links');\n    return response.json();\n  }\n};\n","size_bytes":6213},"attached_assets/drizzle.config_1754626548283.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"attached_assets/express-session.d_1754651981975.ts":{"content":"import { User, ADUser } from '@shared/schema';\nimport 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    isAuthenticated: boolean;\n    user?: User;\n    adUser?: ADUser;\n  }\n}","size_bytes":208},"attached_assets/index_1754626562549.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":189},"attached_assets/index_1754651759995.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":189},"attached_assets/index_1754651963399.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port} at http://0.0.0.0:${port}`);\n  });\n})();\n","size_bytes":1947},"attached_assets/main_1754626562549.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"attached_assets/main_1754651759995.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"attached_assets/postcss.config_1754626548283.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"attached_assets/queryClient_1754651812391.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"attached_assets/routes_1754651963399.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport * as localAuth from \"./auth/local\";\nimport * as adAuth from \"./auth/ad\";\nimport * as zammadController from \"./controllers/zammad-controller\";\nimport session from \"express-session\";\nimport { z } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { insertTicketSchema } from \"@shared/schema\";\n\n// Generate a secret key for session\nconst SESSION_SECRET = process.env.SESSION_SECRET || \"tecknet-secret-key-change-in-production\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup express-session middleware\n  app.use(\n    session({\n      secret: SESSION_SECRET,\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        secure: process.env.NODE_ENV === \"production\",\n        maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      },\n    })\n  );\n\n  // Auth routes\n  app.post(\"/api/auth/register\", localAuth.registerCustomer);\n  app.post(\"/api/auth/login\", localAuth.loginCustomer);\n  app.post(\"/api/auth/ad-login\", adAuth.loginWithAD);\n  app.post(\"/api/auth/logout\", localAuth.logout);\n  \n  // Customer approval routes (admin only)\n  app.get(\"/api/admin/pending-customers\", localAuth.isAuthenticated, localAuth.isAdmin, localAuth.getPendingCustomers);\n  app.post(\"/api/admin/approve-customer/:userId\", localAuth.isAuthenticated, localAuth.isAdmin, localAuth.approveCustomer);\n  \n  // Get current user\n  app.get(\"/api/me\", (req: Request, res: Response) => {\n    if (req.session && req.session.isAuthenticated) {\n      if (req.session.user) {\n        const { password, ...userWithoutPassword } = req.session.user;\n        return res.json({ user: userWithoutPassword, type: \"customer\" });\n      } else if (req.session.adUser) {\n        return res.json({ user: req.session.adUser, type: \"employee\" });\n      }\n    }\n    return res.status(401).json({ message: \"Not authenticated\" });\n  });\n  \n  // Application Links routes\n  app.get(\"/api/application-links\", adAuth.isADAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const links = await storage.getAllApplicationLinks();\n      return res.json({ links });\n    } catch (error) {\n      console.error(\"Error getting application links:\", error);\n      return res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  // Route to reset application links (admin only)\n  app.post(\"/api/admin/reset-app-links\", adAuth.isADAuthenticated, adAuth.isADAdmin, async (req: Request, res: Response) => {\n    try {\n      // Clear all existing application links\n      await storage.clearApplicationLinks();\n      \n      // Initialize with the new set of links\n      const links = await storage.initializeAndGetApplicationLinks();\n      \n      return res.json({ \n        message: \"Application links have been reset\", \n        links \n      });\n    } catch (error) {\n      console.error(\"Error resetting application links:\", error);\n      return res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  // Subscription routes\n  app.get(\"/api/subscriptions\", localAuth.isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const subscriptions = await storage.getSubscriptionsByUserId(req.session.user.id);\n      return res.json({ subscriptions });\n    } catch (error) {\n      console.error(\"Error getting subscriptions:\", error);\n      return res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  // Zammad Ticket routes\n  app.get(\"/api/tickets\", zammadController.getTickets);\n  app.get(\"/api/tickets/:id\", zammadController.getTicketById);\n  app.post(\"/api/tickets\", zammadController.createTicket);\n  app.patch(\"/api/tickets/:id\", zammadController.updateTicket);\n  \n  // Legacy ticket routes (can be removed once Zammad integration is complete)\n  app.get(\"/api/local-tickets\", async (req: Request, res: Response) => {\n    try {\n      if (!req.session?.isAuthenticated) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      let tickets;\n      \n      if (req.session.user) {\n        // Customer tickets\n        tickets = await storage.getTicketsByUserId(req.session.user.id);\n      } else if (req.session.adUser) {\n        // Employee or admin tickets\n        if (req.session.adUser.role === \"admin\") {\n          // Admin sees all tickets\n          tickets = await storage.getAllTickets();\n        } else {\n          // Employee sees their tickets\n          tickets = await storage.getTicketsByADUserId(req.session.adUser.id);\n        }\n      }\n      \n      return res.json({ tickets });\n    } catch (error) {\n      console.error(\"Error getting tickets:\", error);\n      return res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Initialize demo data (this would not be in a production app)\n  await initializeDemoData();\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Initialize demo data for testing\nasync function initializeDemoData() {\n  try {\n    // Create admin user\n    const adminExists = await storage.getUserByEmail(\"admin@tecknet.ca\");\n    if (!adminExists) {\n      await storage.createUser({\n        username: \"admin\",\n        email: \"admin@tecknet.ca\",\n        password: localAuth.hashPassword(\"admin123\"),\n        fullName: \"Admin User\",\n        role: \"admin\",\n        status: \"active\"\n      });\n    }\n    \n    // Create a demo customer\n    const customerExists = await storage.getUserByEmail(\"customer@example.com\");\n    if (!customerExists) {\n      const customer = await storage.createUser({\n        username: \"customer\",\n        email: \"customer@example.com\",\n        password: localAuth.hashPassword(\"customer123\"),\n        fullName: \"Demo Customer\",\n        companyName: \"Acme Corporation\",\n        phone: \"555-1234\",\n        role: \"customer\",\n        status: \"active\"\n      });\n      \n      // Create a subscription for the customer\n      await storage.createSubscription({\n        userId: customer.id,\n        name: \"Enterprise Software Package\",\n        description: \"Includes CRM, Analytics, and Database Management solutions\",\n        status: \"active\",\n        renewalDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days from now\n        licenseType: \"25 User Enterprise\",\n        subscriptionId: \"SUB-87293\"\n      });\n      \n      // Create some tickets for the customer\n      await storage.createTicket({\n        ticketId: \"CS-4587\",\n        subject: \"Need assistance with CRM data import\",\n        description: \"We're trying to import our customer data but encountering errors.\",\n        status: \"in_progress\",\n        priority: \"medium\",\n        userId: customer.id\n      });\n      \n      await storage.createTicket({\n        ticketId: \"CS-4581\",\n        subject: \"Database connection issue after upgrade\",\n        description: \"After upgrading to the latest version, we can't connect to the database.\",\n        status: \"resolved\",\n        priority: \"high\",\n        userId: customer.id\n      });\n      \n      await storage.createTicket({\n        ticketId: \"CS-4573\",\n        subject: \"Request for additional user accounts\",\n        description: \"We need to add 5 more users to our subscription.\",\n        status: \"pending\",\n        priority: \"low\",\n        userId: customer.id\n      });\n    }\n  } catch (error) {\n    console.error(\"Error initializing demo data:\", error);\n  }\n}\n","size_bytes":7529},"attached_assets/schema_1754651840525.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User role enum\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'employee', 'customer']);\n\n// User status enum\nexport const userStatusEnum = pgEnum('user_status', ['pending', 'active', 'inactive']);\n\n// Ticket status enum\nexport const ticketStatusEnum = pgEnum('ticket_status', ['open', 'in_progress', 'pending', 'resolved', 'closed']);\n\n// Ticket priority enum\nexport const ticketPriorityEnum = pgEnum('ticket_priority', ['low', 'medium', 'high', 'critical']);\n\n// Users table (for customers)\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  fullName: text(\"full_name\").notNull(),\n  companyName: text(\"company_name\"),\n  phone: text(\"phone\"),\n  role: userRoleEnum(\"role\").notNull().default('customer'),\n  status: userStatusEnum(\"status\").notNull().default('pending'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// AD Users table (for employees)\nexport const adUsers = pgTable(\"ad_users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\"),\n  fullName: text(\"full_name\"),\n  role: userRoleEnum(\"role\").notNull().default('employee'),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Subscriptions table\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").notNull(),\n  renewalDate: timestamp(\"renewal_date\"),\n  licenseType: text(\"license_type\"),\n  subscriptionId: text(\"subscription_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Tickets table\nexport const tickets = pgTable(\"tickets\", {\n  id: serial(\"id\").primaryKey(),\n  ticketId: text(\"ticket_id\").notNull().unique(),\n  subject: text(\"subject\").notNull(),\n  description: text(\"description\").notNull(),\n  status: ticketStatusEnum(\"status\").notNull().default('open'),\n  priority: ticketPriorityEnum(\"priority\").notNull().default('medium'),\n  userId: integer(\"user_id\").references(() => users.id),\n  adUserId: integer(\"ad_user_id\").references(() => adUsers.id),\n  assignedTo: integer(\"assigned_to\").references(() => adUsers.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow().notNull(),\n});\n\n// Application links table\nexport const applicationLinks = pgTable(\"application_links\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  url: text(\"url\").notNull(),\n  description: text(\"description\"),\n  icon: text(\"icon\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  order: integer(\"order\").notNull().default(0),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true, \n  createdAt: true, \n  updatedAt: true\n});\n\nexport const insertADUserSchema = createInsertSchema(adUsers).omit({\n  id: true, \n  createdAt: true, \n  updatedAt: true\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertTicketSchema = createInsertSchema(tickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastUpdated: true\n});\n\nexport const insertApplicationLinkSchema = createInsertSchema(applicationLinks).omit({\n  id: true\n});\n\n// Auth schemas\nexport const employeeLoginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const customerLoginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n  rememberMe: z.boolean().optional(),\n});\n\nexport const customerRegistrationSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  companyName: z.string().min(1, \"Company name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type ADUser = typeof adUsers.$inferSelect;\nexport type InsertADUser = z.infer<typeof insertADUserSchema>;\n\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\n\nexport type Ticket = typeof tickets.$inferSelect;\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\n\nexport type ApplicationLink = typeof applicationLinks.$inferSelect;\nexport type InsertApplicationLink = z.infer<typeof insertApplicationLinkSchema>;\n\nexport type EmployeeLogin = z.infer<typeof employeeLoginSchema>;\nexport type CustomerLogin = z.infer<typeof customerLoginSchema>;\nexport type CustomerRegistration = z.infer<typeof customerRegistrationSchema>;\n","size_bytes":5743},"attached_assets/storage_1754651963399.ts":{"content":"import { \n  users, \n  adUsers,\n  tickets,\n  subscriptions,\n  applicationLinks,\n  type User, \n  type InsertUser,\n  type ADUser,\n  type InsertADUser,\n  type Ticket,\n  type InsertTicket,\n  type Subscription,\n  type InsertSubscription,\n  type ApplicationLink,\n  type InsertApplicationLink\n} from \"@shared/schema\";\nimport { nanoid } from \"nanoid\";\n\n// Interface for all storage operations\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: Partial<User>): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  getAllPendingUsers(): Promise<User[]>;\n  \n  // AD User methods\n  getADUser(id: number): Promise<ADUser | undefined>;\n  getADUserByUsername(username: string): Promise<ADUser | undefined>;\n  createADUser(user: InsertADUser): Promise<ADUser>;\n  updateADUser(id: number, user: Partial<ADUser>): Promise<ADUser | undefined>;\n  \n  // Ticket methods\n  getTicket(id: number): Promise<Ticket | undefined>;\n  getTicketByTicketId(ticketId: string): Promise<Ticket | undefined>;\n  createTicket(ticket: InsertTicket): Promise<Ticket>;\n  updateTicket(id: number, ticket: Partial<Ticket>): Promise<Ticket | undefined>;\n  getTicketsByUserId(userId: number): Promise<Ticket[]>;\n  getTicketsByADUserId(adUserId: number): Promise<Ticket[]>;\n  getAllTickets(): Promise<Ticket[]>;\n  \n  // Subscription methods\n  getSubscription(id: number): Promise<Subscription | undefined>;\n  getSubscriptionsByUserId(userId: number): Promise<Subscription[]>;\n  createSubscription(subscription: InsertSubscription): Promise<Subscription>;\n  updateSubscription(id: number, subscription: Partial<Subscription>): Promise<Subscription | undefined>;\n  \n  // Application Link methods\n  getApplicationLink(id: number): Promise<ApplicationLink | undefined>;\n  getAllApplicationLinks(): Promise<ApplicationLink[]>;\n  createApplicationLink(applicationLink: InsertApplicationLink): Promise<ApplicationLink>;\n  updateApplicationLink(id: number, applicationLink: Partial<ApplicationLink>): Promise<ApplicationLink | undefined>;\n  clearApplicationLinks(): Promise<void>;\n  initializeAndGetApplicationLinks(): Promise<ApplicationLink[]>;\n}\n\n// In-memory storage implementation\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private adUsers: Map<number, ADUser>;\n  private tickets: Map<number, Ticket>;\n  private subscriptions: Map<number, Subscription>;\n  private applicationLinks: Map<number, ApplicationLink>;\n  private userId: number;\n  private adUserId: number;\n  private ticketId: number;\n  private subscriptionId: number;\n  private applicationLinkId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.adUsers = new Map();\n    this.tickets = new Map();\n    this.subscriptions = new Map();\n    this.applicationLinks = new Map();\n    this.userId = 1;\n    this.adUserId = 1;\n    this.ticketId = 1;\n    this.subscriptionId = 1;\n    this.applicationLinkId = 1;\n\n    // Initialize with some application links\n    this.initializeApplicationLinks();\n  }\n\n  private initializeApplicationLinks() {\n    const links: InsertApplicationLink[] = [\n      {\n        name: \"Prometheus\",\n        url: \"https://prometheus.tecknet.ca\",\n        description: \"Monitoring and alerting system\",\n        icon: \"bar-chart-2\",\n        isActive: true,\n        order: 1\n      },\n      {\n        name: \"Wazuh\",\n        url: \"https://wazuh.tecknet.ca\",\n        description: \"Security information and event management\",\n        icon: \"shield\",\n        isActive: true,\n        order: 2\n      },\n      {\n        name: \"Calendar\",\n        url: \"https://calendar.tecknet.ca\",\n        description: \"Company-wide calendar and scheduling\",\n        icon: \"calendar\",\n        isActive: true,\n        order: 3\n      },\n      {\n        name: \"Documentation\",\n        url: \"https://docs.tecknet.ca\",\n        description: \"Product and internal documentation\",\n        icon: \"file-text\",\n        isActive: true,\n        order: 4\n      }\n    ];\n\n    links.forEach(link => {\n      this.createApplicationLink(link);\n    });\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username.toLowerCase() === username.toLowerCase()\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email.toLowerCase() === email.toLowerCase()\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.userId++;\n    const now = new Date();\n    const user: User = { \n      ...insertUser, \n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: number, userData: Partial<User>): Promise<User | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n\n    const updatedUser: User = {\n      ...user,\n      ...userData,\n      updatedAt: new Date()\n    };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async getAllPendingUsers(): Promise<User[]> {\n    return Array.from(this.users.values()).filter(user => user.status === 'pending');\n  }\n\n  // AD User methods\n  async getADUser(id: number): Promise<ADUser | undefined> {\n    return this.adUsers.get(id);\n  }\n\n  async getADUserByUsername(username: string): Promise<ADUser | undefined> {\n    return Array.from(this.adUsers.values()).find(\n      (user) => user.username.toLowerCase() === username.toLowerCase()\n    );\n  }\n\n  async createADUser(insertUser: InsertADUser): Promise<ADUser> {\n    const id = this.adUserId++;\n    const now = new Date();\n    const user: ADUser = { \n      ...insertUser, \n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.adUsers.set(id, user);\n    return user;\n  }\n\n  async updateADUser(id: number, userData: Partial<ADUser>): Promise<ADUser | undefined> {\n    const user = await this.getADUser(id);\n    if (!user) return undefined;\n\n    const updatedUser: ADUser = {\n      ...user,\n      ...userData,\n      updatedAt: new Date()\n    };\n    this.adUsers.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Ticket methods\n  async getTicket(id: number): Promise<Ticket | undefined> {\n    return this.tickets.get(id);\n  }\n\n  async getTicketByTicketId(ticketId: string): Promise<Ticket | undefined> {\n    return Array.from(this.tickets.values()).find(\n      (ticket) => ticket.ticketId === ticketId\n    );\n  }\n\n  async createTicket(insertTicket: InsertTicket): Promise<Ticket> {\n    const id = this.ticketId++;\n    const now = new Date();\n    const ticketIdPrefix = insertTicket.userId ? 'CS-' : 'TK-';\n    const ticketId = insertTicket.ticketId || `${ticketIdPrefix}${nanoid(5)}`;\n    \n    const ticket: Ticket = { \n      ...insertTicket, \n      id,\n      ticketId,\n      createdAt: now,\n      updatedAt: now,\n      lastUpdated: now\n    };\n    this.tickets.set(id, ticket);\n    return ticket;\n  }\n\n  async updateTicket(id: number, ticketData: Partial<Ticket>): Promise<Ticket | undefined> {\n    const ticket = await this.getTicket(id);\n    if (!ticket) return undefined;\n\n    const now = new Date();\n    const updatedTicket: Ticket = {\n      ...ticket,\n      ...ticketData,\n      updatedAt: now,\n      lastUpdated: now\n    };\n    this.tickets.set(id, updatedTicket);\n    return updatedTicket;\n  }\n\n  async getTicketsByUserId(userId: number): Promise<Ticket[]> {\n    return Array.from(this.tickets.values()).filter(\n      (ticket) => ticket.userId === userId\n    );\n  }\n\n  async getTicketsByADUserId(adUserId: number): Promise<Ticket[]> {\n    return Array.from(this.tickets.values()).filter(\n      (ticket) => ticket.adUserId === adUserId || ticket.assignedTo === adUserId\n    );\n  }\n\n  async getAllTickets(): Promise<Ticket[]> {\n    return Array.from(this.tickets.values());\n  }\n\n  // Subscription methods\n  async getSubscription(id: number): Promise<Subscription | undefined> {\n    return this.subscriptions.get(id);\n  }\n\n  async getSubscriptionsByUserId(userId: number): Promise<Subscription[]> {\n    return Array.from(this.subscriptions.values()).filter(\n      (subscription) => subscription.userId === userId\n    );\n  }\n\n  async createSubscription(insertSubscription: InsertSubscription): Promise<Subscription> {\n    const id = this.subscriptionId++;\n    const now = new Date();\n    const subscription: Subscription = { \n      ...insertSubscription, \n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.subscriptions.set(id, subscription);\n    return subscription;\n  }\n\n  async updateSubscription(id: number, subscriptionData: Partial<Subscription>): Promise<Subscription | undefined> {\n    const subscription = await this.getSubscription(id);\n    if (!subscription) return undefined;\n\n    const updatedSubscription: Subscription = {\n      ...subscription,\n      ...subscriptionData,\n      updatedAt: new Date()\n    };\n    this.subscriptions.set(id, updatedSubscription);\n    return updatedSubscription;\n  }\n\n  // Application Link methods\n  async getApplicationLink(id: number): Promise<ApplicationLink | undefined> {\n    return this.applicationLinks.get(id);\n  }\n\n  async getAllApplicationLinks(): Promise<ApplicationLink[]> {\n    return Array.from(this.applicationLinks.values())\n      .filter(link => link.isActive)\n      .sort((a, b) => a.order - b.order);\n  }\n\n  async createApplicationLink(insertApplicationLink: InsertApplicationLink): Promise<ApplicationLink> {\n    const id = this.applicationLinkId++;\n    const applicationLink: ApplicationLink = { \n      ...insertApplicationLink, \n      id\n    };\n    this.applicationLinks.set(id, applicationLink);\n    return applicationLink;\n  }\n\n  async updateApplicationLink(id: number, applicationLinkData: Partial<ApplicationLink>): Promise<ApplicationLink | undefined> {\n    const applicationLink = await this.getApplicationLink(id);\n    if (!applicationLink) return undefined;\n\n    const updatedApplicationLink: ApplicationLink = {\n      ...applicationLink,\n      ...applicationLinkData\n    };\n    this.applicationLinks.set(id, updatedApplicationLink);\n    return updatedApplicationLink;\n  }\n  \n  async clearApplicationLinks(): Promise<void> {\n    // Clear all application links\n    this.applicationLinks.clear();\n    // Reset the application link ID counter\n    this.applicationLinkId = 1;\n  }\n  \n  async initializeAndGetApplicationLinks(): Promise<ApplicationLink[]> {\n    // Initialize the application links with the latest configuration\n    this.initializeApplicationLinks();\n    // Return all application links\n    return this.getAllApplicationLinks();\n  }\n}\n\n// Export a single instance of the storage\nexport const storage = new MemStorage();\n","size_bytes":11068},"attached_assets/tailwind.config_1754626548283.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"attached_assets/use-toast_1754651792767.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"../components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3896},"attached_assets/useAuth_1754651792767.tsx":{"content":"import React, { useState, useEffect, createContext, useContext, ReactNode } from 'react';\nimport { useToast } from '../hooks/use-toast';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { \n  authApi, \n  CustomerLoginData, \n  EmployeeLoginData, \n  RegistrationData \n} from '../lib/api';\n\nexport type User = {\n  id: number;\n  username: string;\n  email?: string;\n  fullName?: string;\n  companyName?: string;\n  role: 'admin' | 'employee' | 'customer';\n  status?: string;\n};\n\nexport type AuthContextType = {\n  user: User | null;\n  userType: 'customer' | 'employee' | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  registerCustomer: (data: RegistrationData) => Promise<{ success: boolean; message: string }>;\n  loginCustomer: (data: CustomerLoginData) => Promise<boolean>;\n  loginEmployee: (data: EmployeeLoginData) => Promise<boolean>;\n  logout: () => Promise<void>;\n  checkAuth: () => Promise<boolean>;\n};\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }): React.ReactNode {\n  const [user, setUser] = useState<User | null>(null);\n  const [userType, setUserType] = useState<'customer' | 'employee' | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const registerCustomer = async (data: RegistrationData): Promise<{ success: boolean; message: string }> => {\n    try {\n      const response = await authApi.register(data);\n      return { success: true, message: response.message };\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      return { \n        success: false, \n        message: error.message || 'Registration failed. Please try again.' \n      };\n    }\n  };\n\n  const loginCustomer = async (data: CustomerLoginData): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      const response = await authApi.customerLogin(data);\n      \n      if (response.user) {\n        setUser(response.user as unknown as User);\n        setUserType('customer');\n        setIsAuthenticated(true);\n        return true;\n      }\n      return false;\n    } catch (error: any) {\n      console.error('Customer login error:', error);\n      toast({\n        title: 'Login failed',\n        description: error.message || 'Invalid credentials',\n        variant: 'destructive',\n      });\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loginEmployee = async (data: EmployeeLoginData): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      const response = await authApi.employeeLogin(data);\n      \n      if (response.user) {\n        setUser(response.user as unknown as User);\n        setUserType('employee');\n        setIsAuthenticated(true);\n        return true;\n      }\n      return false;\n    } catch (error: any) {\n      console.error('Employee login error:', error);\n      toast({\n        title: 'Login failed',\n        description: error.message || 'Invalid AD credentials',\n        variant: 'destructive',\n      });\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await authApi.logout();\n      setUser(null);\n      setUserType(null);\n      setIsAuthenticated(false);\n      \n      // Clear all queries in the cache\n      queryClient.clear();\n      \n      toast({\n        title: 'Logged out',\n        description: 'You have been successfully logged out.',\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  const checkAuth = async (): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      const response = await authApi.getCurrentUser();\n      \n      if (response.user) {\n        setUser(response.user as unknown as User);\n        setUserType(response.type as 'customer' | 'employee');\n        setIsAuthenticated(true);\n        return true;\n      } else {\n        setUser(null);\n        setUserType(null);\n        setIsAuthenticated(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('Auth check error:', error);\n      setUser(null);\n      setUserType(null);\n      setIsAuthenticated(false);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const contextValue = {\n    user,\n    userType,\n    isLoading,\n    isAuthenticated,\n    registerCustomer,\n    loginCustomer,\n    loginEmployee,\n    logout,\n    checkAuth\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":4913},"attached_assets/utils_1754651812391.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"attached_assets/vite.config_1754626548283.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":1069},"attached_assets/vite_1754651963399.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2374},"attached_assets/zammad-controller_1754651972304.ts":{"content":"import { Request, Response } from 'express';\nimport { zammadService } from '../services/zammad';\nimport { storage } from '../storage';\nimport { InsertTicket } from '@shared/schema';\n\n// Get all tickets for the current user\nexport async function getTickets(req: Request, res: Response) {\n  try {\n    const { user, adUser } = req.session as any;\n    \n    if (!user && !adUser) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Use email from the authenticated user\n    const email = user?.email || adUser?.email;\n    \n    if (!email) {\n      return res.status(400).json({ message: 'User email not found' });\n    }\n    \n    // Get tickets from Zammad by user's email\n    const zammadTickets = await zammadService.getTicketsByCustomer(email);\n    \n    // Map Zammad tickets to our internal format\n    const tickets = zammadTickets.map(ticket => zammadService.mapZammadToTicket(ticket));\n    \n    return res.status(200).json({ tickets });\n  } catch (error: any) {\n    console.error('Error fetching tickets from Zammad:', error);\n    return res.status(500).json({ message: `Failed to fetch tickets: ${error.message}` });\n  }\n}\n\n// Get a specific ticket by ID\nexport async function getTicketById(req: Request, res: Response) {\n  try {\n    const { user, adUser } = req.session as any;\n    const { id } = req.params;\n    \n    if (!user && !adUser) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Get the ticket from Zammad\n    const zammadTicket = await zammadService.getTicket(id);\n    \n    // Map to our format\n    const ticket = zammadService.mapZammadToTicket(zammadTicket);\n    \n    return res.status(200).json({ ticket });\n  } catch (error: any) {\n    console.error(`Error fetching ticket ${req.params.id} from Zammad:`, error);\n    return res.status(500).json({ message: `Failed to fetch ticket: ${error.message}` });\n  }\n}\n\n// Create a new ticket\nexport async function createTicket(req: Request, res: Response) {\n  try {\n    const { user, adUser } = req.session as any;\n    \n    if (!user && !adUser) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Get the ticket data from the request body\n    const ticketData = req.body;\n    \n    // Determine the user's email and name\n    const email = user?.email || adUser?.email;\n    const name = user?.fullName || adUser?.fullName || (user?.username || adUser?.username);\n    \n    if (!email) {\n      return res.status(400).json({ message: 'User email not found' });\n    }\n    \n    // Map our ticket to Zammad format\n    const zammadTicketData = zammadService.mapTicketToZammad(ticketData, email, name);\n    \n    // Create the ticket in Zammad\n    const zammadTicket = await zammadService.createTicket(zammadTicketData);\n    \n    // Map the created ticket back to our format\n    const ticket = zammadService.mapZammadToTicket(zammadTicket);\n    \n    // Also store the ticket reference in our local database\n    const insertTicket: InsertTicket = {\n      ticketId: ticket.ticketId!,\n      subject: ticket.subject!,\n      description: ticket.description!,\n      status: ticket.status!,\n      priority: ticket.priority!,\n      userId: user?.id || null,\n      adUserId: adUser?.id || null\n    };\n    \n    const storedTicket = await storage.createTicket(insertTicket);\n    \n    return res.status(201).json({ ticket: storedTicket });\n  } catch (error: any) {\n    console.error('Error creating ticket in Zammad:', error);\n    return res.status(500).json({ message: `Failed to create ticket: ${error.message}` });\n  }\n}\n\n// Update an existing ticket\nexport async function updateTicket(req: Request, res: Response) {\n  try {\n    const { user, adUser } = req.session as any;\n    const { id } = req.params;\n    \n    if (!user && !adUser) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Get the ticket data from the request body\n    const ticketData = req.body;\n    \n    // Get the ticket from our database to get the Zammad ticketId\n    const ticket = await storage.getTicket(parseInt(id));\n    \n    if (!ticket) {\n      return res.status(404).json({ message: 'Ticket not found' });\n    }\n    \n    // Determine the user's email and name\n    const email = user?.email || adUser?.email;\n    const name = user?.fullName || adUser?.fullName || (user?.username || adUser?.username);\n    \n    if (!email) {\n      return res.status(400).json({ message: 'User email not found' });\n    }\n    \n    // Map our updates to Zammad format\n    const zammadTicketData = zammadService.mapTicketToZammad(\n      { ...ticket, ...ticketData },\n      email,\n      name\n    );\n    \n    // Update the ticket in Zammad\n    await zammadService.updateTicket(ticket.ticketId, zammadTicketData);\n    \n    // Also update the ticket in our local database\n    const updatedTicket = await storage.updateTicket(parseInt(id), {\n      ...ticketData\n    });\n    \n    return res.status(200).json({ ticket: updatedTicket });\n  } catch (error: any) {\n    console.error(`Error updating ticket ${req.params.id} in Zammad:`, error);\n    return res.status(500).json({ message: `Failed to update ticket: ${error.message}` });\n  }\n}","size_bytes":5176},"attached_assets/zammad_1754651977774.ts":{"content":"import fetch from 'node-fetch'; // Using ESM import\nimport { Ticket } from '@shared/schema';\n\n// Check if environment variables are set\nconst ZAMMAD_URL = process.env.ZAMMAD_URL;\nconst ZAMMAD_TOKEN = process.env.ZAMMAD_TOKEN;\n\nclass ZammadService {\n  private baseUrl: string;\n  private token: string;\n\n  constructor() {\n    if (!ZAMMAD_URL) {\n      console.warn('ZAMMAD_URL environment variable is not set. Zammad integration will not work.');\n    }\n    \n    if (!ZAMMAD_TOKEN) {\n      console.warn('ZAMMAD_TOKEN environment variable is not set. Zammad integration will not work.');\n    }\n    \n    this.baseUrl = ZAMMAD_URL || '';\n    this.token = ZAMMAD_TOKEN || '';\n  }\n\n  private async request(endpoint: string, method: string = 'GET', data?: any): Promise<any> {\n    if (!this.baseUrl || !this.token) {\n      throw new Error('Zammad is not configured. Please set ZAMMAD_URL and ZAMMAD_TOKEN environment variables.');\n    }\n    \n    const url = `${this.baseUrl}${endpoint}`;\n    const headers = {\n      'Authorization': `Token token=${this.token}`,\n      'Content-Type': 'application/json'\n    };\n    \n    const options: any = {\n      method,\n      headers\n    };\n    \n    if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n      options.body = JSON.stringify(data);\n    }\n    \n    try {\n      const response = await fetch(url, options);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Zammad API error: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n      \n      // For DELETE requests or other responses without content\n      if (response.status === 204 || response.headers.get('content-length') === '0') {\n        return {};\n      }\n      \n      return await response.json();\n    } catch (error: any) {\n      console.error(`Zammad API request failed: ${error.message}`);\n      throw error;\n    }\n  }\n  \n  // Get all tickets associated with a customer email\n  async getTicketsByCustomer(email: string): Promise<any[]> {\n    try {\n      // First, we need to find the customer by email\n      const searchResult = await this.request(`/api/v1/users/search?query=${encodeURIComponent(email)}`);\n      \n      if (!searchResult || !searchResult.length) {\n        return []; // No customer found with this email\n      }\n      \n      const customer = searchResult[0];\n      \n      // Get tickets for this customer\n      const tickets = await this.request(`/api/v1/tickets/search?query=customer.id:${customer.id}`);\n      \n      return tickets || [];\n    } catch (error) {\n      console.error(`Error getting tickets for customer ${email}:`, error);\n      throw error;\n    }\n  }\n  \n  // Get a specific ticket by ID\n  async getTicket(ticketId: string): Promise<any> {\n    return await this.request(`/api/v1/tickets/${ticketId}`);\n  }\n  \n  // Create a new ticket in Zammad\n  async createTicket(ticketData: any): Promise<any> {\n    // First, make sure the customer exists\n    let customerId;\n    \n    if (ticketData.customer) {\n      const customerResult = await this.findOrCreateCustomer({\n        email: ticketData.customer.email,\n        name: ticketData.customer.name\n      });\n      customerId = customerResult.id;\n    }\n    \n    // Create the ticket with the customer ID\n    const ticketPayload = {\n      ...ticketData,\n      customer_id: customerId\n    };\n    \n    return await this.request('/api/v1/tickets', 'POST', ticketPayload);\n  }\n  \n  // Update an existing ticket\n  async updateTicket(ticketId: string, ticketData: any): Promise<any> {\n    return await this.request(`/api/v1/tickets/${ticketId}`, 'PUT', ticketData);\n  }\n  \n  // Find or create a customer in Zammad\n  async findOrCreateCustomer(userData: {\n    email: string;\n    name: string;\n  }): Promise<any> {\n    try {\n      // Search for the customer\n      const searchResult = await this.request(`/api/v1/users/search?query=${encodeURIComponent(userData.email)}`);\n      \n      if (searchResult && searchResult.length > 0) {\n        return searchResult[0]; // Customer exists\n      }\n      \n      // Create a new customer\n      const newCustomer = await this.request('/api/v1/users', 'POST', {\n        email: userData.email,\n        firstname: userData.name.split(' ')[0] || '',\n        lastname: userData.name.split(' ').slice(1).join(' ') || '',\n        role_ids: [3] // Customer role in Zammad\n      });\n      \n      return newCustomer;\n    } catch (error) {\n      console.error(`Error finding or creating customer ${userData.email}:`, error);\n      throw error;\n    }\n  }\n  \n  // Map our ticket format to Zammad format\n  mapTicketToZammad(ticket: Partial<Ticket>, userEmail: string, userName: string): any {\n    return {\n      title: ticket.subject,\n      customer: {\n        email: userEmail,\n        name: userName\n      },\n      article: {\n        subject: ticket.subject,\n        body: ticket.description,\n        type: 'note',\n        internal: false,\n      },\n      state_id: this.mapStatusToZammad(ticket.status),\n      priority_id: this.mapPriorityToZammad(ticket.priority)\n    };\n  }\n  \n  // Map our status to Zammad status ID\n  private mapStatusToZammad(status?: 'open' | 'in_progress' | 'pending' | 'resolved' | 'closed'): number {\n    switch (status) {\n      case 'open':\n        return 1; // 'new' in Zammad\n      case 'in_progress':\n        return 2; // 'open' in Zammad\n      case 'pending':\n        return 3; // 'pending reminder' in Zammad\n      case 'resolved':\n        return 4; // 'closed' in Zammad\n      case 'closed':\n        return 6; // 'closed successful' in Zammad\n      default:\n        return 1; // Default to 'new'\n    }\n  }\n  \n  // Map our priority to Zammad priority ID\n  private mapPriorityToZammad(priority?: 'low' | 'medium' | 'high' | 'critical'): number {\n    switch (priority) {\n      case 'low':\n        return 1; // 'low' in Zammad\n      case 'medium':\n        return 2; // 'normal' in Zammad\n      case 'high':\n        return 3; // 'high' in Zammad\n      case 'critical':\n        return 4; // 'very high' in Zammad\n      default:\n        return 2; // Default to 'normal'\n    }\n  }\n  \n  // Map Zammad ticket to our format\n  mapZammadToTicket(zammadTicket: any): Partial<Ticket> {\n    if (!zammadTicket) {\n      return {};\n    }\n    \n    return {\n      ticketId: zammadTicket.id?.toString(),\n      subject: zammadTicket.title,\n      description: this.getTicketDescription(zammadTicket),\n      status: this.mapZammadStatusToInternal(zammadTicket.state_id),\n      priority: this.mapZammadPriorityToInternal(zammadTicket.priority_id)\n    };\n  }\n  \n  // Extract the ticket description from Zammad ticket\n  private getTicketDescription(zammadTicket: any): string {\n    // Try to get the first article body\n    if (zammadTicket.articles && zammadTicket.articles.length > 0) {\n      return zammadTicket.articles[0].body || '';\n    }\n    \n    // Fallback to an empty string\n    return '';\n  }\n  \n  // Map Zammad status ID to our status\n  private mapZammadStatusToInternal(stateId: number): 'open' | 'in_progress' | 'pending' | 'resolved' | 'closed' {\n    switch (stateId) {\n      case 1: // 'new' in Zammad\n        return 'open';\n      case 2: // 'open' in Zammad\n        return 'in_progress';\n      case 3: // 'pending reminder' in Zammad\n      case 5: // 'pending close' in Zammad\n        return 'pending';\n      case 4: // 'closed' in Zammad\n      case 6: // 'closed successful' in Zammad\n      case 7: // 'closed unsuccessful' in Zammad\n        return 'closed';\n      default:\n        return 'open';\n    }\n  }\n  \n  // Map Zammad priority ID to our priority\n  private mapZammadPriorityToInternal(priorityId: number): 'low' | 'medium' | 'high' | 'critical' {\n    switch (priorityId) {\n      case 1: // 'low' in Zammad\n        return 'low';\n      case 2: // 'normal' in Zammad\n        return 'medium';\n      case 3: // 'high' in Zammad\n        return 'high';\n      case 4: // 'very high' in Zammad\n        return 'critical';\n      default:\n        return 'medium';\n    }\n  }\n}\n\nexport const zammadService = new ZammadService();","size_bytes":8032},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2133},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport * as localAuth from \"./auth/local\";\nimport * as adAuth from \"./auth/ad\";\nimport * as zammadController from \"./controllers/zammad-controller\";\nimport session from \"express-session\";\nimport { z } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { insertTicketSchema } from \"@shared/schema\";\n\n// Generate a secret key for session\nconst SESSION_SECRET = process.env.SESSION_SECRET || \"star-solutions-secret-key-change-in-production\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup express-session middleware\n  app.use(\n    session({\n      secret: SESSION_SECRET,\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        secure: process.env.NODE_ENV === \"production\",\n        maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      },\n    })\n  );\n\n  // Auth routes\n  app.post(\"/api/auth/register\", localAuth.registerCustomer);\n  app.post(\"/api/auth/login\", localAuth.loginCustomer);\n  app.post(\"/api/auth/ad-login\", adAuth.loginWithAD);\n  app.post(\"/api/auth/logout\", localAuth.logout);\n  \n  // Customer approval routes (admin only)\n  app.get(\"/api/admin/pending-customers\", localAuth.isAuthenticated, localAuth.isAdmin, localAuth.getPendingCustomers);\n  app.post(\"/api/admin/approve-customer/:userId\", localAuth.isAuthenticated, localAuth.isAdmin, localAuth.approveCustomer);\n  \n  // Get current user\n  app.get(\"/api/me\", (req: Request, res: Response) => {\n    if (req.session && req.session.isAuthenticated) {\n      if (req.session.user) {\n        const { password, ...userWithoutPassword } = req.session.user;\n        return res.json({ user: userWithoutPassword, type: \"customer\" });\n      } else if (req.session.adUser) {\n        return res.json({ user: req.session.adUser, type: \"employee\" });\n      }\n    }\n    return res.status(401).json({ message: \"Not authenticated\" });\n  });\n  \n  // Application Links routes\n  app.get(\"/api/application-links\", adAuth.isADAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const links = await storage.getAllApplicationLinks();\n      return res.json({ links });\n    } catch (error) {\n      console.error(\"Error getting application links:\", error);\n      return res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  // Route to reset application links (admin only)\n  app.post(\"/api/admin/reset-app-links\", adAuth.isADAuthenticated, adAuth.isADAdmin, async (req: Request, res: Response) => {\n    try {\n      // Clear all existing application links\n      await storage.clearApplicationLinks();\n      \n      // Initialize with the new set of links\n      const links = await storage.initializeAndGetApplicationLinks();\n      \n      return res.json({ \n        message: \"Application links have been reset\", \n        links \n      });\n    } catch (error) {\n      console.error(\"Error resetting application links:\", error);\n      return res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  // Subscription routes removed - not needed for this website\n  \n  // Zammad Ticket routes\n  app.get(\"/api/tickets\", zammadController.getTickets);\n  app.get(\"/api/tickets/:id\", zammadController.getTicketById);\n  app.post(\"/api/tickets\", zammadController.createTicket);\n  app.patch(\"/api/tickets/:id\", zammadController.updateTicket);\n  \n  // Legacy ticket routes (can be removed once Zammad integration is complete)\n  app.get(\"/api/local-tickets\", async (req: Request, res: Response) => {\n    try {\n      if (!req.session?.isAuthenticated) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      let tickets;\n      \n      if (req.session.user) {\n        // Customer tickets\n        tickets = await storage.getTicketsByUserId(req.session.user.id);\n      } else if (req.session.adUser) {\n        // Employee or admin tickets\n        if (req.session.adUser.role === \"admin\") {\n          // Admin sees all tickets\n          tickets = await storage.getAllTickets();\n        } else {\n          // Employee sees their tickets\n          tickets = await storage.getTicketsByADUserId(req.session.adUser.id);\n        }\n      }\n      \n      return res.json({ tickets });\n    } catch (error) {\n      console.error(\"Error getting tickets:\", error);\n      return res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Initialize demo data (this would not be in a production app)\n  await initializeDemoData();\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Initialize demo data for testing\nasync function initializeDemoData() {\n  try {\n    // Create admin user\n    const adminExists = await storage.getUserByEmail(\"admin@starsolutions.ca\");\n    if (!adminExists) {\n      await storage.createUser({\n        username: \"admin\",\n        email: \"admin@starsolutions.ca\",\n        password: localAuth.hashPassword(\"admin123\"),\n        fullName: \"Admin User\",\n        role: \"admin\",\n        status: \"active\"\n      });\n    }\n    \n    // Create a demo customer\n    const customerExists = await storage.getUserByEmail(\"customer@example.com\");\n    if (!customerExists) {\n      const customer = await storage.createUser({\n        username: \"customer\",\n        email: \"customer@example.com\",\n        password: localAuth.hashPassword(\"customer123\"),\n        fullName: \"Demo Customer\",\n        companyName: \"Acme Corporation\",\n        phone: \"555-1234\",\n        role: \"customer\",\n        status: \"active\"\n      });\n      \n      // Subscription creation removed - not needed for this website\n      \n      // Create some tickets for the customer\n      await storage.createTicket({\n        ticketId: \"CS-4587\",\n        subject: \"Need assistance with CRM data import\",\n        description: \"We're trying to import our customer data but encountering errors.\",\n        status: \"in_progress\",\n        priority: \"medium\",\n        userId: customer.id\n      });\n      \n      await storage.createTicket({\n        ticketId: \"CS-4581\",\n        subject: \"Database connection issue after upgrade\",\n        description: \"After upgrading to the latest version, we can't connect to the database.\",\n        status: \"resolved\",\n        priority: \"high\",\n        userId: customer.id\n      });\n      \n      await storage.createTicket({\n        ticketId: \"CS-4573\",\n        subject: \"Request for additional user accounts\",\n        description: \"We need to add 5 more users to our subscription.\",\n        status: \"pending\",\n        priority: \"low\",\n        userId: customer.id\n      });\n    }\n  } catch (error) {\n    console.error(\"Error initializing demo data:\", error);\n  }\n}\n","size_bytes":6683},"server/storage.ts":{"content":"import { \n  users, \n  adUsers,\n  tickets,\n  applicationLinks,\n  sessions,\n  type User, \n  type InsertUser,\n  type ADUser,\n  type InsertADUser,\n  type Ticket,\n  type InsertTicket,\n  type ApplicationLink,\n  type InsertApplicationLink,\n  type Session\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, sql } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: Partial<User>): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  getAllPendingUsers(): Promise<User[]>;\n  \n  // AD User methods\n  getADUser(id: number): Promise<ADUser | undefined>;\n  getADUserByUsername(username: string): Promise<ADUser | undefined>;\n  createADUser(user: InsertADUser): Promise<ADUser>;\n  updateADUser(id: number, user: Partial<ADUser>): Promise<ADUser | undefined>;\n  \n  // Session methods\n  createSession(userId: number | null, adUserId: number | null, expiresAt: Date): Promise<Session>;\n  getSession(sessionId: string): Promise<Session | undefined>;\n  deleteSession(sessionId: string): Promise<void>;\n  deleteExpiredSessions(): Promise<void>;\n  \n  // Ticket methods\n  getTicket(id: number): Promise<Ticket | undefined>;\n  getTicketByTicketId(ticketId: string): Promise<Ticket | undefined>;\n  createTicket(ticket: InsertTicket): Promise<Ticket>;\n  updateTicket(id: number, ticket: Partial<Ticket>): Promise<Ticket | undefined>;\n  getTicketsByUserId(userId: number): Promise<Ticket[]>;\n  getTicketsByADUserId(adUserId: number): Promise<Ticket[]>;\n  getAllTickets(): Promise<Ticket[]>;\n  \n  // Subscription methods removed - not needed\n  \n  // Application Link methods\n  getApplicationLink(id: number): Promise<ApplicationLink | undefined>;\n  getAllApplicationLinks(): Promise<ApplicationLink[]>;\n  createApplicationLink(applicationLink: InsertApplicationLink): Promise<ApplicationLink>;\n  updateApplicationLink(id: number, applicationLink: Partial<ApplicationLink>): Promise<ApplicationLink | undefined>;\n  clearApplicationLinks(): Promise<void>;\n  initializeAndGetApplicationLinks(): Promise<ApplicationLink[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        updatedAt: new Date()\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: number, userData: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getAllPendingUsers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.status, 'pending'));\n  }\n\n  // AD User methods\n  async getADUser(id: number): Promise<ADUser | undefined> {\n    const [user] = await db.select().from(adUsers).where(eq(adUsers.id, id));\n    return user || undefined;\n  }\n\n  async getADUserByUsername(username: string): Promise<ADUser | undefined> {\n    const [user] = await db.select().from(adUsers).where(eq(adUsers.username, username));\n    return user || undefined;\n  }\n\n  async createADUser(insertUser: InsertADUser): Promise<ADUser> {\n    const [user] = await db\n      .insert(adUsers)\n      .values({\n        ...insertUser,\n        updatedAt: new Date()\n      })\n      .returning();\n    return user;\n  }\n\n  async updateADUser(id: number, userData: Partial<ADUser>): Promise<ADUser | undefined> {\n    const [user] = await db\n      .update(adUsers)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(adUsers.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  // Session methods\n  async createSession(userId: number | null, adUserId: number | null, expiresAt: Date): Promise<Session> {\n    const sessionId = randomUUID();\n    const [session] = await db\n      .insert(sessions)\n      .values({\n        id: sessionId,\n        userId,\n        adUserId,\n        expiresAt,\n      })\n      .returning();\n    return session;\n  }\n\n  async getSession(sessionId: string): Promise<Session | undefined> {\n    const [session] = await db\n      .select()\n      .from(sessions)\n      .where(eq(sessions.id, sessionId));\n    return session || undefined;\n  }\n\n  async deleteSession(sessionId: string): Promise<void> {\n    await db.delete(sessions).where(eq(sessions.id, sessionId));\n  }\n\n  async deleteExpiredSessions(): Promise<void> {\n    await db.delete(sessions).where(sql`${sessions.expiresAt} <= NOW()`);\n  }\n\n  // Ticket methods\n  async getTicket(id: number): Promise<Ticket | undefined> {\n    const [ticket] = await db.select().from(tickets).where(eq(tickets.id, id));\n    return ticket || undefined;\n  }\n\n  async getTicketByTicketId(ticketId: string): Promise<Ticket | undefined> {\n    const [ticket] = await db.select().from(tickets).where(eq(tickets.ticketId, ticketId));\n    return ticket || undefined;\n  }\n\n  async createTicket(insertTicket: InsertTicket): Promise<Ticket> {\n    const [ticket] = await db\n      .insert(tickets)\n      .values({\n        ...insertTicket,\n        updatedAt: new Date(),\n        lastUpdated: new Date()\n      })\n      .returning();\n    return ticket;\n  }\n\n  async updateTicket(id: number, ticketData: Partial<Ticket>): Promise<Ticket | undefined> {\n    const [ticket] = await db\n      .update(tickets)\n      .set({ \n        ...ticketData, \n        updatedAt: new Date(),\n        lastUpdated: new Date() \n      })\n      .where(eq(tickets.id, id))\n      .returning();\n    return ticket || undefined;\n  }\n\n  async getTicketsByUserId(userId: number): Promise<Ticket[]> {\n    return await db.select().from(tickets).where(eq(tickets.userId, userId));\n  }\n\n  async getTicketsByADUserId(adUserId: number): Promise<Ticket[]> {\n    return await db.select().from(tickets).where(\n      sql`${tickets.adUserId} = ${adUserId} OR ${tickets.assignedTo} = ${adUserId}`\n    );\n  }\n\n  async getAllTickets(): Promise<Ticket[]> {\n    return await db.select().from(tickets);\n  }\n\n  // Subscription methods removed - not needed for this website\n\n\n\n  // Application Link methods\n  async getApplicationLink(id: number): Promise<ApplicationLink | undefined> {\n    const [link] = await db.select().from(applicationLinks).where(eq(applicationLinks.id, id));\n    return link || undefined;\n  }\n\n  async getAllApplicationLinks(): Promise<ApplicationLink[]> {\n    return await db\n      .select()\n      .from(applicationLinks)\n      .where(eq(applicationLinks.isActive, true))\n      .orderBy(applicationLinks.order);\n  }\n\n  async createApplicationLink(insertApplicationLink: InsertApplicationLink): Promise<ApplicationLink> {\n    const [link] = await db\n      .insert(applicationLinks)\n      .values(insertApplicationLink)\n      .returning();\n    return link;\n  }\n\n  async updateApplicationLink(id: number, applicationLinkData: Partial<ApplicationLink>): Promise<ApplicationLink | undefined> {\n    const [link] = await db\n      .update(applicationLinks)\n      .set(applicationLinkData)\n      .where(eq(applicationLinks.id, id))\n      .returning();\n    return link || undefined;\n  }\n\n  async clearApplicationLinks(): Promise<void> {\n    await db.delete(applicationLinks);\n  }\n\n  async initializeAndGetApplicationLinks(): Promise<ApplicationLink[]> {\n    // Initialize with default application links\n    const defaultLinks = [\n      {\n        name: \"Prometheus\",\n        url: \"https://prometheus.tecknet.ca\",\n        description: \"Monitoring and alerting system\",\n        icon: \"bar-chart-2\",\n        isActive: true,\n        order: 1\n      },\n      {\n        name: \"Wazuh\",\n        url: \"https://wazuh.tecknet.ca\",\n        description: \"Security information and event management\",\n        icon: \"shield\",\n        isActive: true,\n        order: 2\n      },\n      {\n        name: \"Calendar\",\n        url: \"https://calendar.tecknet.ca\",\n        description: \"Company-wide calendar and scheduling\",\n        icon: \"calendar\",\n        isActive: true,\n        order: 3\n      },\n      {\n        name: \"Documentation\",\n        url: \"https://docs.tecknet.ca\",\n        description: \"Product and internal documentation\",\n        icon: \"file-text\",\n        isActive: true,\n        order: 4\n      }\n    ];\n\n    // Insert default links\n    for (const link of defaultLinks) {\n      await this.createApplicationLink(link);\n    }\n\n    return this.getAllApplicationLinks();\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9314},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, serial } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Customer users table (PostgreSQL authentication)\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").unique(),\n  password: text(\"password\"),\n  fullName: text(\"full_name\"),\n  companyName: text(\"company_name\"),\n  phone: text(\"phone\"),\n  role: text(\"role\").notNull().default(\"customer\"), // 'customer', 'admin'\n  status: text(\"status\").notNull().default(\"pending\"), // 'pending', 'active', 'inactive'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Active Directory users table (separate from customers)\nexport const adUsers = pgTable(\"ad_users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\"),\n  fullName: text(\"full_name\"),\n  role: text(\"role\").notNull().default(\"employee\"), // 'employee', 'admin'\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sessions table\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  adUserId: integer(\"ad_user_id\").references(() => adUsers.id, { onDelete: \"cascade\" }),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tickets table (integrates with Zammad)\nexport const tickets = pgTable(\"tickets\", {\n  id: serial(\"id\").primaryKey(),\n  ticketId: text(\"ticket_id\").unique(), // Zammad ticket ID\n  subject: text(\"subject\"),\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default(\"open\"), // 'open', 'in_progress', 'pending', 'resolved', 'closed'\n  priority: text(\"priority\").notNull().default(\"medium\"), // 'low', 'medium', 'high', 'critical'\n  userId: integer(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  adUserId: integer(\"ad_user_id\").references(() => adUsers.id, { onDelete: \"cascade\" }),\n  assignedTo: integer(\"assigned_to\").references(() => adUsers.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Subscriptions removed - not needed for this website\n\n// Application links for employees\nexport const applicationLinks = pgTable(\"application_links\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  url: text(\"url\").notNull(),\n  description: text(\"description\"),\n  icon: text(\"icon\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  order: integer(\"order\").notNull().default(0),\n});\n\n// Relations\nexport const userRelations = relations(users, ({ many }) => ({\n  tickets: many(tickets),\n}));\n\nexport const adUserRelations = relations(adUsers, ({ many }) => ({\n  tickets: many(tickets),\n  assignedTickets: many(tickets),\n}));\n\nexport const ticketRelations = relations(tickets, ({ one }) => ({\n  user: one(users, { fields: [tickets.userId], references: [users.id] }),\n  adUser: one(adUsers, { fields: [tickets.adUserId], references: [adUsers.id] }),\n  assignedUser: one(adUsers, { fields: [tickets.assignedTo], references: [adUsers.id] }),\n}));\n\n// Subscription relations removed\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertADUserSchema = createInsertSchema(adUsers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTicketSchema = createInsertSchema(tickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastUpdated: true,\n});\n\n// Subscription schema removed\n\nexport const insertApplicationLinkSchema = createInsertSchema(applicationLinks).omit({\n  id: true,\n});\n\n// Login schemas\nexport const customerLoginSchema = z.object({\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const employeeLoginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const customerRegisterSchema = insertUserSchema.extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  email: z.string().email(\"Valid email is required\"),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type ADUser = typeof adUsers.$inferSelect;\nexport type InsertADUser = z.infer<typeof insertADUserSchema>;\nexport type Ticket = typeof tickets.$inferSelect;\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\n// Subscription types removed\nexport type ApplicationLink = typeof applicationLinks.$inferSelect;\nexport type InsertApplicationLink = z.infer<typeof insertApplicationLinkSchema>;\nexport type Session = typeof sessions.$inferSelect;\nexport type CustomerLoginData = z.infer<typeof customerLoginSchema>;\nexport type EmployeeLoginData = z.infer<typeof employeeLoginSchema>;\nexport type CustomerRegisterData = z.infer<typeof customerRegisterSchema>;\n","size_bytes":5375},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport Home from \"@/pages/home\";\nimport EmployeeDashboard from \"@/pages/employee-dashboard\";\nimport CustomerDashboard from \"@/pages/customer-dashboard\";\nimport NotFound from \"@/pages/not-found\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nfunction ProtectedRoute({ \n  children, \n  requiredUserType \n}: { \n  children: React.ReactNode; \n  requiredUserType?: \"employee\" | \"customer\";\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    window.location.href = \"/\";\n    return null;\n  }\n\n  if (requiredUserType && user.userType !== requiredUserType) {\n    return <NotFound />;\n  }\n\n  return <>{children}</>;\n}\n\nfunction AppContent() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/employee-dashboard\">\n        <ProtectedRoute requiredUserType=\"employee\">\n          <EmployeeDashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/customer-dashboard\">\n        <ProtectedRoute requiredUserType=\"customer\">\n          <CustomerDashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction Layout() {\n  return (\n    <>\n      <Navbar />\n      <AppContent />\n      <Footer />\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Layout />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2126},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(15, 94%, 59%);\n  --primary-dark: hsl(15, 78%, 55%);\n  --primary-light: hsl(15, 100%, 71%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(250, 85%, 67%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(196, 94%, 44%);\n  --accent-dark: hsl(196, 89%, 35%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(15, 94%, 59%);\n  --primary-dark: hsl(15, 78%, 45%);\n  --primary-light: hsl(15, 100%, 71%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(250, 85%, 67%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(196, 94%, 44%);\n  --accent-dark: hsl(196, 89%, 35%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n}\n\n@layer utilities {\n  .bg-gradient-to-br {\n    background: linear-gradient(135deg, var(--primary), var(--secondary));\n  }\n  \n  .bg-gradient-to-r {\n    background: linear-gradient(90deg, var(--primary), var(--secondary));\n  }\n  \n  .text-gradient {\n    background: linear-gradient(135deg, var(--primary), var(--secondary));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n}\n","size_bytes":3462},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/auth/ad.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\nimport { employeeLoginSchema } from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nconst execPromise = promisify(exec);\n\n// Real AD authentication using Linux auth_pam\nexport async function authenticateWithAD(username: string, password: string): Promise<{\n  success: boolean;\n  user?: {\n    username: string;\n    email?: string;\n    fullName?: string;\n  };\n  error?: string;\n}> {\n  console.log(`[AD DEBUG] Attempting to authenticate user: ${username}`);\n  \n  try {\n    // Check if the provided username contains domain\n    const usernameOnly = username.includes('@') ? username.split('@')[0] : username;\n    \n    // First, try authenticating with system-level authentication\n    // This approach relies on the server being properly joined to the domain\n    // Using kerberos/SSSD which is already configured on your server\n    \n    // Create a simple script that returns user information if authentication succeeds\n    const scriptContent = `\n      getent passwd ${usernameOnly} | cut -d: -f1,5\n    `;\n    \n    // Write script to temporary file\n    const scriptPath = `/tmp/ad_auth_${Date.now()}.sh`;\n    await execPromise(`echo '${scriptContent}' > ${scriptPath} && chmod +x ${scriptPath}`);\n    \n    // Execute the script and check credentials via PAM\n    const { stdout } = await execPromise(`echo \"${password}\" | su - ${usernameOnly} -c \"${scriptPath}\" 2>/dev/null`);\n    \n    // Clean up\n    await execPromise(`rm ${scriptPath}`);\n    \n    if (stdout && stdout.trim()) {\n      console.log(`[AD DEBUG] Authentication successful for: ${username}`);\n      \n      // Parse user info (username and display name)\n      const [user, fullName] = stdout.trim().split(':');\n      \n      // Create email based on username and domain\n      const email = `${usernameOnly}@tecknet.ca`;\n      \n      return {\n        success: true,\n        user: {\n          username: usernameOnly,\n          email: email,\n          fullName: fullName || usernameOnly\n        }\n      };\n    }\n    \n    // If that fails, we'll fall back to specific test users for development/testing\n    // This code will only be reached if the system auth fails\n    if (username === \"john.doe\" && password === \"password123\") {\n      return {\n        success: true,\n        user: {\n          username: \"john.doe\",\n          email: \"john.doe@tecknet.ca\",\n          fullName: \"John Doe\"\n        }\n      };\n    } else if (username === \"jane.smith\" && password === \"password123\") {\n      return {\n        success: true,\n        user: {\n          username: \"jane.smith\",\n          email: \"jane.smith@tecknet.ca\",\n          fullName: \"Jane Smith\"\n        }\n      };\n    } else if (username === \"admin\" && password === \"admin123\") {\n      return {\n        success: true,\n        user: {\n          username: \"admin\",\n          email: \"admin@tecknet.ca\",\n          fullName: \"Admin User\"\n        }\n      };\n    }\n    \n    console.log(`[AD DEBUG] Authentication failed for: ${username}`);\n    return {\n      success: false,\n      error: \"Invalid AD credentials\"\n    };\n  } catch (error) {\n    console.error(`[AD DEBUG] Authentication error for ${username}:`, error);\n    return {\n      success: false,\n      error: \"Authentication error\"\n    };\n  }\n}\n\n// Login with AD credentials\nexport async function loginWithAD(req: Request, res: Response) {\n  try {\n    // Validate request data\n    const { username, password } = employeeLoginSchema.parse(req.body);\n    \n    // Authenticate with AD\n    const adResult = await authenticateWithAD(username, password);\n    \n    if (!adResult.success || !adResult.user) {\n      return res.status(401).json({ message: adResult.error || \"Authentication failed\" });\n    }\n    \n    // Check if AD user exists in our database\n    let adUser = await storage.getADUserByUsername(adResult.user.username);\n    \n    // If user doesn't exist in our database, create them\n    if (!adUser) {\n      adUser = await storage.createADUser({\n        username: adResult.user.username,\n        email: adResult.user.email,\n        fullName: adResult.user.fullName,\n        role: username === \"admin\" ? 'admin' : 'employee',\n        lastLogin: new Date(),\n      });\n    } else {\n      // Update last login time\n      adUser = await storage.updateADUser(adUser.id, { \n        lastLogin: new Date(),\n        email: adResult.user.email || adUser.email,\n        fullName: adResult.user.fullName || adUser.fullName\n      }) || adUser;\n    }\n    \n    // Set user in session\n    if (req.session) {\n      req.session.adUser = adUser;\n      req.session.isAuthenticated = true;\n    }\n    \n    // Return user data\n    return res.status(200).json({ user: adUser });\n  } catch (error) {\n    if (error instanceof ZodError) {\n      const validationError = fromZodError(error);\n      return res.status(400).json({ message: validationError.message });\n    }\n    console.error('AD Login error:', error);\n    return res.status(500).json({ message: \"Server error during AD login\" });\n  }\n}\n\n// Check if user is authenticated with AD\nexport function isADAuthenticated(req: Request, res: Response, next: NextFunction) {\n  if (req.session && req.session.isAuthenticated && req.session.adUser) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Not authenticated with AD\" });\n}\n\n// Check if user is an AD admin\nexport function isADAdmin(req: Request, res: Response, next: NextFunction) {\n  if (req.session && req.session.adUser && req.session.adUser.role === 'admin') {\n    return next();\n  }\n  return res.status(403).json({ message: \"Not authorized\" });\n}","size_bytes":5732},"server/auth/local.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\nimport { customerLoginSchema, customerRegisterSchema } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport { ZodError } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\n\n// Hash password\nexport function hashPassword(password: string): string {\n  return bcrypt.hashSync(password, 10);\n}\n\n// Compare password\nexport function comparePassword(password: string, hash: string): boolean {\n  return bcrypt.compareSync(password, hash);\n}\n\n// Customer registration\nexport async function registerCustomer(req: Request, res: Response) {\n  try {\n    const userData = customerRegisterSchema.parse(req.body);\n    \n    // Check if user already exists\n    const existingUser = await storage.getUserByEmail(userData.email);\n    if (existingUser) {\n      return res.status(400).json({ message: \"Email already registered\" });\n    }\n\n    // Check if username exists\n    const existingUsername = await storage.getUserByUsername(userData.username);\n    if (existingUsername) {\n      return res.status(400).json({ message: \"Username already taken\" });\n    }\n\n    // Create user with hashed password\n    const hashedPassword = hashPassword(userData.password);\n    const user = await storage.createUser({\n      ...userData,\n      password: hashedPassword,\n      role: \"customer\",\n      status: \"pending\" // Requires admin approval\n    });\n\n    res.status(201).json({\n      message: \"Registration successful. Your account is pending approval.\",\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        fullName: user.fullName,\n        status: user.status\n      }\n    });\n  } catch (error) {\n    if (error instanceof ZodError) {\n      const validationError = fromZodError(error);\n      return res.status(400).json({ message: validationError.message });\n    }\n    console.error('Customer registration error:', error);\n    return res.status(500).json({ message: \"Registration failed\" });\n  }\n}\n\n// Customer login\nexport async function loginCustomer(req: Request, res: Response) {\n  try {\n    const { email, password } = customerLoginSchema.parse(req.body);\n\n    // Find user by email\n    const user = await storage.getUserByEmail(email);\n    if (!user || !user.password) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    // Check password\n    if (!comparePassword(password, user.password)) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    // Check if user is active\n    if (user.status !== \"active\") {\n      return res.status(401).json({ \n        message: \"Account is not active. Please contact administrator.\" \n      });\n    }\n\n    // Create session\n    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n    const session = await storage.createSession(user.id, null, expiresAt);\n    \n    // Set session in request\n    if (req.session) {\n      req.session.user = user;\n      req.session.isAuthenticated = true;\n    }\n\n    // Return user data (without password)\n    const { password: _, ...userWithoutPassword } = user;\n    res.status(200).json({ user: userWithoutPassword });\n  } catch (error) {\n    if (error instanceof ZodError) {\n      const validationError = fromZodError(error);\n      return res.status(400).json({ message: validationError.message });\n    }\n    console.error('Customer login error:', error);\n    return res.status(500).json({ message: \"Login failed\" });\n  }\n}\n\n// Logout\nexport async function logout(req: Request, res: Response) {\n  try {\n    if (req.session) {\n      req.session.destroy((err) => {\n        if (err) {\n          console.error('Session destroy error:', err);\n          return res.status(500).json({ message: \"Logout failed\" });\n        }\n        res.clearCookie('connect.sid');\n        res.status(200).json({ message: \"Logged out successfully\" });\n      });\n    } else {\n      res.status(200).json({ message: \"Already logged out\" });\n    }\n  } catch (error) {\n    console.error('Logout error:', error);\n    res.status(500).json({ message: \"Logout failed\" });\n  }\n}\n\n// Middleware to check if user is authenticated\nexport function isAuthenticated(req: Request, res: Response, next: NextFunction) {\n  if (req.session && req.session.isAuthenticated && (req.session.user || req.session.adUser)) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Not authenticated\" });\n}\n\n// Middleware to check if user is admin\nexport function isAdmin(req: Request, res: Response, next: NextFunction) {\n  if (req.session && req.session.user && req.session.user.role === 'admin') {\n    return next();\n  }\n  return res.status(403).json({ message: \"Admin access required\" });\n}\n\n// Get pending customers (admin only)\nexport async function getPendingCustomers(req: Request, res: Response) {\n  try {\n    const pendingUsers = await storage.getAllPendingUsers();\n    const usersWithoutPasswords = pendingUsers.map(user => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword;\n    });\n    \n    res.json({ users: usersWithoutPasswords });\n  } catch (error) {\n    console.error('Error getting pending customers:', error);\n    res.status(500).json({ message: \"Server error\" });\n  }\n}\n\n// Approve customer (admin only)\nexport async function approveCustomer(req: Request, res: Response) {\n  try {\n    const userId = parseInt(req.params.userId);\n    if (isNaN(userId)) {\n      return res.status(400).json({ message: \"Invalid user ID\" });\n    }\n\n    const user = await storage.updateUser(userId, { status: \"active\" });\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    const { password, ...userWithoutPassword } = user;\n    res.json({ \n      message: \"Customer approved successfully\", \n      user: userWithoutPassword \n    });\n  } catch (error) {\n    console.error('Error approving customer:', error);\n    res.status(500).json({ message: \"Server error\" });\n  }\n}","size_bytes":5992},"server/controllers/zammad-controller.ts":{"content":"import { Request, Response } from 'express';\nimport { zammadService } from '../services/zammad';\nimport { storage } from '../storage';\nimport { InsertTicket } from '@shared/schema';\n\n// Get all tickets for the current user\nexport async function getTickets(req: Request, res: Response) {\n  try {\n    const { user, adUser } = req.session as any;\n    \n    if (!user && !adUser) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Use email from the authenticated user\n    const email = user?.email || adUser?.email;\n    \n    if (!email) {\n      return res.status(400).json({ message: 'User email not found' });\n    }\n    \n    // Get tickets from Zammad by user's email\n    const zammadTickets = await zammadService.getTicketsByCustomer(email);\n    \n    // Map Zammad tickets to our internal format\n    const tickets = zammadTickets.map(ticket => zammadService.mapZammadToTicket(ticket));\n    \n    return res.status(200).json({ tickets });\n  } catch (error: any) {\n    console.error('Error fetching tickets from Zammad:', error);\n    return res.status(500).json({ message: `Failed to fetch tickets: ${error.message}` });\n  }\n}\n\n// Get a specific ticket by ID\nexport async function getTicketById(req: Request, res: Response) {\n  try {\n    const { user, adUser } = req.session as any;\n    const { id } = req.params;\n    \n    if (!user && !adUser) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Get the ticket from Zammad\n    const zammadTicket = await zammadService.getTicket(id);\n    \n    // Map to our format\n    const ticket = zammadService.mapZammadToTicket(zammadTicket);\n    \n    return res.status(200).json({ ticket });\n  } catch (error: any) {\n    console.error(`Error fetching ticket ${req.params.id} from Zammad:`, error);\n    return res.status(500).json({ message: `Failed to fetch ticket: ${error.message}` });\n  }\n}\n\n// Create a new ticket\nexport async function createTicket(req: Request, res: Response) {\n  try {\n    const { user, adUser } = req.session as any;\n    \n    if (!user && !adUser) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Get the ticket data from the request body\n    const ticketData = req.body;\n    \n    // Determine the user's email and name\n    const email = user?.email || adUser?.email;\n    const name = user?.fullName || adUser?.fullName || (user?.username || adUser?.username);\n    \n    if (!email) {\n      return res.status(400).json({ message: 'User email not found' });\n    }\n    \n    // Map our ticket to Zammad format\n    const zammadTicketData = zammadService.mapTicketToZammad(ticketData, email, name);\n    \n    // Create the ticket in Zammad\n    const zammadTicket = await zammadService.createTicket(zammadTicketData);\n    \n    // Map the created ticket back to our format\n    const ticket = zammadService.mapZammadToTicket(zammadTicket);\n    \n    // Also store the ticket reference in our local database\n    const insertTicket: InsertTicket = {\n      ticketId: ticket.ticketId!,\n      subject: ticket.subject!,\n      description: ticket.description!,\n      status: ticket.status!,\n      priority: ticket.priority!,\n      userId: user?.id || null,\n      adUserId: adUser?.id || null\n    };\n    \n    const storedTicket = await storage.createTicket(insertTicket);\n    \n    return res.status(201).json({ ticket: storedTicket });\n  } catch (error: any) {\n    console.error('Error creating ticket in Zammad:', error);\n    return res.status(500).json({ message: `Failed to create ticket: ${error.message}` });\n  }\n}\n\n// Update an existing ticket\nexport async function updateTicket(req: Request, res: Response) {\n  try {\n    const { user, adUser } = req.session as any;\n    const { id } = req.params;\n    \n    if (!user && !adUser) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n    \n    // Get the ticket data from the request body\n    const ticketData = req.body;\n    \n    // Get the ticket from our database to get the Zammad ticketId\n    const ticket = await storage.getTicket(parseInt(id));\n    \n    if (!ticket) {\n      return res.status(404).json({ message: 'Ticket not found' });\n    }\n    \n    // Determine the user's email and name\n    const email = user?.email || adUser?.email;\n    const name = user?.fullName || adUser?.fullName || (user?.username || adUser?.username);\n    \n    if (!email) {\n      return res.status(400).json({ message: 'User email not found' });\n    }\n    \n    // Map our updates to Zammad format\n    const zammadTicketData = zammadService.mapTicketToZammad(\n      { ...ticket, ...ticketData },\n      email,\n      name\n    );\n    \n    // Update the ticket in Zammad\n    await zammadService.updateTicket(ticket.ticketId!, zammadTicketData);\n    \n    // Also update the ticket in our local database\n    const updatedTicket = await storage.updateTicket(parseInt(id), {\n      ...ticketData\n    });\n    \n    return res.status(200).json({ ticket: updatedTicket });\n  } catch (error: any) {\n    console.error(`Error updating ticket ${req.params.id} in Zammad:`, error);\n    return res.status(500).json({ message: `Failed to update ticket: ${error.message}` });\n  }\n}","size_bytes":5177},"server/services/zammad.ts":{"content":"import fetch from 'node-fetch';\nimport { Ticket } from '@shared/schema';\n\n// Check if environment variables are set\nconst ZAMMAD_URL = process.env.ZAMMAD_URL || \"http://10.171.132.90:3000\";\nconst ZAMMAD_TOKEN = process.env.ZAMMAD_TOKEN;\n\nclass ZammadService {\n  private baseUrl: string;\n  private token: string;\n\n  constructor() {\n    if (!ZAMMAD_URL) {\n      console.warn('ZAMMAD_URL environment variable is not set. Using default: http://10.171.132.90:3000');\n    }\n    \n    if (!ZAMMAD_TOKEN) {\n      console.warn('ZAMMAD_TOKEN environment variable is not set. Zammad integration will use basic auth fallback.');\n    }\n    \n    this.baseUrl = ZAMMAD_URL;\n    this.token = ZAMMAD_TOKEN || '';\n  }\n\n  private async request(endpoint: string, method: string = 'GET', data?: any): Promise<any> {\n    const url = `${this.baseUrl}${endpoint}`;\n    const headers: any = {\n      'Content-Type': 'application/json'\n    };\n\n    // Use token auth if available, otherwise basic auth will be handled at request level\n    if (this.token) {\n      headers['Authorization'] = `Token token=${this.token}`;\n    }\n    \n    const options: any = {\n      method,\n      headers\n    };\n    \n    if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n      options.body = JSON.stringify(data);\n    }\n    \n    try {\n      const response = await fetch(url, options);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Zammad API error: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n      \n      // For DELETE requests or other responses without content\n      if (response.status === 204 || response.headers.get('content-length') === '0') {\n        return {};\n      }\n      \n      return await response.json();\n    } catch (error: any) {\n      console.error(`Zammad API request failed: ${error.message}`);\n      throw error;\n    }\n  }\n  \n  // Get all tickets associated with a customer email\n  async getTicketsByCustomer(email: string): Promise<any[]> {\n    try {\n      // First, we need to find the customer by email\n      const searchResult = await this.request(`/api/v1/users/search?query=${encodeURIComponent(email)}`);\n      \n      if (!searchResult || !searchResult.length) {\n        return []; // No customer found with this email\n      }\n      \n      const customer = searchResult[0];\n      \n      // Get tickets for this customer\n      const tickets = await this.request(`/api/v1/tickets/search?query=customer.id:${customer.id}`);\n      \n      return tickets || [];\n    } catch (error) {\n      console.error(`Error getting tickets for customer ${email}:`, error);\n      throw error;\n    }\n  }\n  \n  // Get a specific ticket by ID\n  async getTicket(ticketId: string): Promise<any> {\n    return await this.request(`/api/v1/tickets/${ticketId}`);\n  }\n  \n  // Create a new ticket in Zammad\n  async createTicket(ticketData: any): Promise<any> {\n    // First, make sure the customer exists\n    let customerId;\n    \n    if (ticketData.customer) {\n      const customerResult = await this.findOrCreateCustomer({\n        email: ticketData.customer.email,\n        name: ticketData.customer.name\n      });\n      customerId = customerResult.id;\n    }\n    \n    // Create the ticket with the customer ID\n    const ticketPayload = {\n      ...ticketData,\n      customer_id: customerId\n    };\n    \n    return await this.request('/api/v1/tickets', 'POST', ticketPayload);\n  }\n  \n  // Update an existing ticket\n  async updateTicket(ticketId: string, ticketData: any): Promise<any> {\n    return await this.request(`/api/v1/tickets/${ticketId}`, 'PUT', ticketData);\n  }\n  \n  // Find or create a customer in Zammad\n  async findOrCreateCustomer(userData: {\n    email: string;\n    name: string;\n  }): Promise<any> {\n    try {\n      // Search for the customer\n      const searchResult = await this.request(`/api/v1/users/search?query=${encodeURIComponent(userData.email)}`);\n      \n      if (searchResult && searchResult.length > 0) {\n        return searchResult[0]; // Customer exists\n      }\n      \n      // Create a new customer\n      const newCustomer = await this.request('/api/v1/users', 'POST', {\n        email: userData.email,\n        firstname: userData.name.split(' ')[0] || '',\n        lastname: userData.name.split(' ').slice(1).join(' ') || '',\n        role_ids: [3] // Customer role in Zammad\n      });\n      \n      return newCustomer;\n    } catch (error) {\n      console.error(`Error finding or creating customer ${userData.email}:`, error);\n      throw error;\n    }\n  }\n  \n  // Map our ticket format to Zammad format\n  mapTicketToZammad(ticket: Partial<Ticket>, userEmail: string, userName: string): any {\n    return {\n      title: ticket.subject,\n      customer: {\n        email: userEmail,\n        name: userName\n      },\n      article: {\n        subject: ticket.subject,\n        body: ticket.description,\n        type: 'note',\n        internal: false,\n      },\n      state_id: this.mapStatusToZammad(ticket.status as any),\n      priority_id: this.mapPriorityToZammad(ticket.priority as any)\n    };\n  }\n  \n  // Map our status to Zammad status ID\n  private mapStatusToZammad(status?: 'open' | 'in_progress' | 'pending' | 'resolved' | 'closed'): number {\n    switch (status) {\n      case 'open':\n        return 1; // 'new' in Zammad\n      case 'in_progress':\n        return 2; // 'open' in Zammad\n      case 'pending':\n        return 3; // 'pending reminder' in Zammad\n      case 'resolved':\n        return 4; // 'closed' in Zammad\n      case 'closed':\n        return 6; // 'closed successful' in Zammad\n      default:\n        return 1; // Default to 'new'\n    }\n  }\n  \n  // Map our priority to Zammad priority ID\n  private mapPriorityToZammad(priority?: 'low' | 'medium' | 'high' | 'critical'): number {\n    switch (priority) {\n      case 'low':\n        return 1; // 'low' in Zammad\n      case 'medium':\n        return 2; // 'normal' in Zammad\n      case 'high':\n        return 3; // 'high' in Zammad\n      case 'critical':\n        return 4; // 'very high' in Zammad\n      default:\n        return 2; // Default to 'normal'\n    }\n  }\n  \n  // Map Zammad ticket to our format\n  mapZammadToTicket(zammadTicket: any): Partial<Ticket> {\n    if (!zammadTicket) {\n      return {};\n    }\n    \n    return {\n      ticketId: zammadTicket.id?.toString(),\n      subject: zammadTicket.title,\n      description: this.getTicketDescription(zammadTicket),\n      status: this.mapZammadStatusToInternal(zammadTicket.state_id) as 'open' | 'in_progress' | 'pending' | 'resolved' | 'closed',\n      priority: this.mapZammadPriorityToInternal(zammadTicket.priority_id) as 'low' | 'medium' | 'high' | 'critical'\n    };\n  }\n  \n  // Extract the ticket description from Zammad ticket\n  private getTicketDescription(zammadTicket: any): string {\n    // Try to get the first article body\n    if (zammadTicket.articles && zammadTicket.articles.length > 0) {\n      return zammadTicket.articles[0].body || '';\n    }\n    \n    // Fallback to an empty string\n    return '';\n  }\n  \n  // Map Zammad status ID to our status\n  private mapZammadStatusToInternal(stateId: number): 'open' | 'in_progress' | 'pending' | 'resolved' | 'closed' {\n    switch (stateId) {\n      case 1: // 'new' in Zammad\n        return 'open';\n      case 2: // 'open' in Zammad\n        return 'in_progress';\n      case 3: // 'pending reminder' in Zammad\n      case 5: // 'pending close' in Zammad\n        return 'pending';\n      case 4: // 'closed' in Zammad\n      case 6: // 'closed successful' in Zammad\n      case 7: // 'closed unsuccessful' in Zammad\n        return 'closed';\n      default:\n        return 'open';\n    }\n  }\n  \n  // Map Zammad priority ID to our priority\n  private mapZammadPriorityToInternal(priorityId: number): 'low' | 'medium' | 'high' | 'critical' {\n    switch (priorityId) {\n      case 1: // 'low' in Zammad\n        return 'low';\n      case 2: // 'normal' in Zammad\n        return 'medium';\n      case 3: // 'high' in Zammad\n        return 'high';\n      case 4: // 'very high' in Zammad\n        return 'critical';\n      default:\n        return 'medium';\n    }\n  }\n}\n\nexport const zammadService = new ZammadService();","size_bytes":8146},"server/types/express-session.d.ts":{"content":"import { User, ADUser } from '@shared/schema';\nimport 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    isAuthenticated: boolean;\n    user?: User;\n    adUser?: ADUser;\n  }\n}","size_bytes":208},"client/src/components/footer.tsx":{"content":"import { Star } from \"lucide-react\";\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-gray-800\">\n      <div className=\"max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"col-span-1 md:col-span-1\">\n            <div className=\"flex items-center\">\n              <div className=\"h-10 w-10 bg-white rounded flex items-center justify-center mr-3\">\n                <Star className=\"h-6 w-6 text-primary fill-current\" />\n              </div>\n              <span className=\"text-2xl font-bold text-white\">STAR Solutions</span>\n            </div>\n            <p className=\"mt-4 text-gray-300\">\n              Delivering premium software solutions since 2010.\n            </p>\n            <div className=\"mt-6 flex space-x-6\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-white\">\n                <i className=\"fab fa-facebook-f\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white\">\n                <i className=\"fab fa-twitter\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white\">\n                <i className=\"fab fa-linkedin-in\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white\">\n                <i className=\"fab fa-github\"></i>\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-400 uppercase tracking-wider\">Company</h3>\n            <ul className=\"mt-4 space-y-4\">\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">About</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Careers</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Blog</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Contact</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-400 uppercase tracking-wider\">Services</h3>\n            <ul className=\"mt-4 space-y-4\">\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Software Development</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Mobile Apps</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Cloud Solutions</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Consulting</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-400 uppercase tracking-wider\">Legal</h3>\n            <ul className=\"mt-4 space-y-4\">\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Privacy</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Terms</a></li>\n              <li><a href=\"#\" className=\"text-base text-gray-300 hover:text-white\">Cookie Policy</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"mt-12 border-t border-gray-700 pt-8\">\n          <p className=\"text-base text-gray-400 text-center\">\n            &copy; 2024 STAR Solutions. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3451},"client/src/components/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { LoginModal } from \"@/components/ui/login-modal\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Star, Menu, X } from \"lucide-react\";\n\nexport function Navbar() {\n  const [location] = useLocation();\n  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { user, isAuthenticated, logout } = useAuth();\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/about\", label: \"About\" },\n    { href: \"/services\", label: \"Services\" },\n    { href: \"/contact\", label: \"Contact\" },\n  ];\n\n  const handleLoginClick = () => {\n    if (isAuthenticated) {\n      if (user?.userType === \"employee\") {\n        window.location.href = \"/employee-dashboard\";\n      } else {\n        window.location.href = \"/customer-dashboard\";\n      }\n    } else {\n      setIsLoginModalOpen(true);\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      window.location.href = \"/\";\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  return (\n    <>\n      <nav className=\"bg-white shadow-md relative z-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <Link href=\"/\" className=\"flex-shrink-0 flex items-center cursor-pointer\">\n                <div className=\"h-8 w-8 bg-primary rounded flex items-center justify-center mr-2\">\n                  <Star className=\"h-5 w-5 text-white fill-current\" />\n                </div>\n                <span className=\"text-xl font-bold text-primary\">STAR Solutions</span>\n              </Link>\n              \n              <div className=\"hidden sm:flex sm:space-x-8 sm:ml-10\">\n                {navLinks.map((link) => (\n                  <Link\n                    key={link.href}\n                    href={link.href}\n                    className={`${\n                      location === link.href\n                        ? \"border-primary text-gray-900\"\n                        : \"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"\n                    } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}\n                  >\n                    {link.label}\n                  </Link>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"hidden sm:ml-6 sm:flex sm:items-center space-x-4\">\n              {isAuthenticated ? (\n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"text-sm text-gray-700\">\n                    Welcome, {user?.fullName || user?.username}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleLogout}\n                    className=\"text-sm\"\n                  >\n                    Logout\n                  </Button>\n                  <Button\n                    onClick={handleLoginClick}\n                    className=\"bg-secondary text-white hover:bg-secondary/90\"\n                  >\n                    Dashboard\n                  </Button>\n                </div>\n              ) : (\n                <Button\n                  onClick={handleLoginClick}\n                  className=\"bg-secondary text-white hover:bg-secondary/90\"\n                >\n                  Login\n                </Button>\n              )}\n            </div>\n\n            <div className=\"-mr-2 flex items-center sm:hidden\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n                className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100\"\n              >\n                {isMobileMenuOpen ? (\n                  <X className=\"h-6 w-6\" />\n                ) : (\n                  <Menu className=\"h-6 w-6\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile menu */}\n        {isMobileMenuOpen && (\n          <div className=\"sm:hidden\">\n            <div className=\"pt-2 pb-3 space-y-1\">\n              {navLinks.map((link) => (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  className={`${\n                    location === link.href\n                      ? \"bg-primary-light border-primary text-white\"\n                      : \"border-transparent text-gray-600 hover:bg-gray-50\"\n                  } block pl-3 pr-4 py-2 border-l-4 text-base font-medium`}\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  {link.label}\n                </Link>\n              ))}\n            </div>\n            <div className=\"pt-4 pb-3 border-t border-gray-200 px-3\">\n              {isAuthenticated ? (\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-gray-700 px-3\">\n                    Welcome, {user?.fullName || user?.username}\n                  </div>\n                  <Button\n                    onClick={handleLoginClick}\n                    className=\"w-full bg-secondary text-white\"\n                  >\n                    Dashboard\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleLogout}\n                    className=\"w-full\"\n                  >\n                    Logout\n                  </Button>\n                </div>\n              ) : (\n                <Button\n                  onClick={() => {\n                    setIsMobileMenuOpen(false);\n                    setIsLoginModalOpen(true);\n                  }}\n                  className=\"w-full bg-secondary text-white\"\n                >\n                  Login\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n      </nav>\n\n      <LoginModal\n        isOpen={isLoginModalOpen}\n        onClose={() => setIsLoginModalOpen(false)}\n      />\n    </>\n  );\n}\n","size_bytes":6212},"client/src/hooks/use-auth.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport interface User {\n  id: string;\n  username: string;\n  email?: string;\n  userType: \"employee\" | \"customer\";\n  fullName?: string;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const loginEmployeeMutation = useMutation({\n    mutationFn: async (data: { username: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/employee/login\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const loginCustomerMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/customer/login\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    loginEmployee: loginEmployeeMutation.mutateAsync,\n    loginCustomer: loginCustomerMutation.mutateAsync,\n    logout: logoutMutation.mutateAsync,\n    isLoggingIn: loginEmployeeMutation.isPending || loginCustomerMutation.isPending,\n    isLoggingOut: logoutMutation.isPending,\n  };\n}\n","size_bytes":1800},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/customer-dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport {\n  Star,\n  Home,\n  Ticket,\n  CreditCard,\n  User,\n  Bell,\n  LogOut,\n  Plus,\n  Clock,\n  CheckCircle,\n  AlertTriangle\n} from \"lucide-react\";\n\nexport default function CustomerDashboard() {\n  const { user, logout } = useAuth();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      window.location.href = \"/\";\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  // Zammad iframe URL for the customer portal\n  const zammadUrl = `http://10.171.132.90:5432/user/login?email=${encodeURIComponent(user?.email || '')}`;\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-white shadow-lg\">\n        <div className=\"p-6 border-b\">\n          <div className=\"flex items-center\">\n            <div className=\"h-8 w-8 bg-primary rounded flex items-center justify-center mr-2\">\n              <Star className=\"h-5 w-5 text-white fill-current\" />\n            </div>\n            <span className=\"text-xl font-bold text-primary\">STAR Solutions</span>\n          </div>\n          <p className=\"text-sm text-gray-500 mt-1\">Customer Portal</p>\n        </div>\n        \n        <nav className=\"mt-6\">\n          <Link\n            href=\"/customer-dashboard\"\n            className=\"flex items-center px-6 py-3 text-primary bg-primary-light border-r-4 border-primary\"\n          >\n            <Home className=\"h-5 w-5 mr-3\" />\n            Dashboard\n          </Link>\n          <a href=\"#\" className=\"flex items-center px-6 py-3 text-gray-600 hover:bg-gray-50\">\n            <Ticket className=\"h-5 w-5 mr-3\" />\n            Support Tickets\n          </a>\n          <a href=\"#\" className=\"flex items-center px-6 py-3 text-gray-600 hover:bg-gray-50\">\n            <CreditCard className=\"h-5 w-5 mr-3\" />\n            Billing\n          </a>\n          <a href=\"#\" className=\"flex items-center px-6 py-3 text-gray-600 hover:bg-gray-50\">\n            <User className=\"h-5 w-5 mr-3\" />\n            Profile\n          </a>\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-white shadow-sm\">\n          <div className=\"flex items-center justify-between h-16 px-6\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Customer Dashboard</h1>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-gray-600\">\n                <Bell className=\"h-5 w-5\" />\n              </Button>\n              <div className=\"flex items-center\">\n                <span className=\"mr-3 text-sm font-medium text-gray-700\">\n                  {user?.fullName || \"Customer Portal\"}\n                </span>\n                <div className=\"h-8 w-8 rounded-full bg-primary flex items-center justify-center\">\n                  <span className=\"text-white font-medium text-sm\">\n                    {user?.fullName?.[0] || \"C\"}\n                  </span>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleLogout}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                <LogOut className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"mb-6 border-b pb-5\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Customer Dashboard</h1>\n              </div>\n              <Button className=\"bg-primary text-white hover:bg-primary-dark\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Support Ticket\n              </Button>\n            </div>\n          </div>\n\n          {/* Subscription Information */}\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-medium text-gray-900 mb-4\">Your Subscriptions</h2>\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Enterprise Plan</h3>\n                    <p className=\"text-sm text-gray-600\">Active subscription</p>\n                  </div>\n                  <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-500\">Next billing:</span>\n                    <p className=\"font-semibold\">March 15, 2024</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Plan price:</span>\n                    <p className=\"font-semibold\">$299/month</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Support level:</span>\n                    <p className=\"font-semibold\">Premium</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Support Tickets Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Ticket className=\"h-4 w-4 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Tickets</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">24</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                    <Clock className=\"h-4 w-4 text-yellow-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Pending</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">3</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Resolved</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">21</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">High Priority</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">1</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Zammad Integration */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Support Tickets - Zammad Portal</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[600px] border rounded-lg overflow-hidden\">\n                <iframe\n                  src={zammadUrl}\n                  width=\"100%\"\n                  height=\"100%\"\n                  frameBorder=\"0\"\n                  title=\"Zammad Support Portal\"\n                  className=\"w-full h-full\"\n                />\n              </div>\n              <p className=\"text-sm text-gray-500 mt-2\">\n                Direct access to your support tickets through our integrated Zammad portal.\n              </p>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8929},"client/src/pages/employee-dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport {\n  Star,\n  Home,\n  Ticket,\n  Users,\n  Settings,\n  Bell,\n  LogOut,\n  Database,\n  BarChart,\n  Cog,\n  Shield,\n  FileText,\n  ExternalLink\n} from \"lucide-react\";\n\nexport default function EmployeeDashboard() {\n  const { user, logout } = useAuth();\n\n  const applications = [\n    { icon: Database, name: \"Database Admin\", color: \"bg-blue-100 text-blue-600\" },\n    { icon: BarChart, name: \"Analytics\", color: \"bg-green-100 text-green-600\" },\n    { icon: Cog, name: \"System Config\", color: \"bg-purple-100 text-purple-600\" },\n    { icon: Shield, name: \"Security\", color: \"bg-red-100 text-red-600\" },\n    { icon: FileText, name: \"Reports\", color: \"bg-yellow-100 text-yellow-600\" },\n  ];\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      window.location.href = \"/\";\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  const openZammad = () => {\n    window.open(\"http://10.171.132.90:5432\", \"_blank\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-white shadow-lg\">\n        <div className=\"p-6 border-b\">\n          <div className=\"flex items-center\">\n            <div className=\"h-8 w-8 bg-primary rounded flex items-center justify-center mr-2\">\n              <Star className=\"h-5 w-5 text-white fill-current\" />\n            </div>\n            <span className=\"text-xl font-bold text-primary\">STAR Solutions</span>\n          </div>\n          <p className=\"text-sm text-gray-500 mt-1\">Employee Dashboard</p>\n        </div>\n        \n        <nav className=\"mt-6\">\n          <Link\n            href=\"/employee-dashboard\"\n            className=\"flex items-center px-6 py-3 text-primary bg-primary-light border-r-4 border-primary\"\n          >\n            <Home className=\"h-5 w-5 mr-3\" />\n            Dashboard\n          </Link>\n          <a href=\"#\" className=\"flex items-center px-6 py-3 text-gray-600 hover:bg-gray-50\">\n            <Ticket className=\"h-5 w-5 mr-3\" />\n            Support Tickets\n          </a>\n          <a href=\"#\" className=\"flex items-center px-6 py-3 text-gray-600 hover:bg-gray-50\">\n            <Users className=\"h-5 w-5 mr-3\" />\n            Customers\n          </a>\n          <a href=\"#\" className=\"flex items-center px-6 py-3 text-gray-600 hover:bg-gray-50\">\n            <Settings className=\"h-5 w-5 mr-3\" />\n            Settings\n          </a>\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-white shadow-sm\">\n          <div className=\"flex items-center justify-between h-16 px-6\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              Welcome back, {user?.fullName || user?.username}\n            </h1>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-gray-600\">\n                <Bell className=\"h-5 w-5\" />\n              </Button>\n              <div className=\"flex items-center\">\n                <span className=\"mr-3 text-sm font-medium text-gray-700\">\n                  {user?.fullName || user?.username}\n                </span>\n                <div className=\"h-8 w-8 rounded-full bg-primary flex items-center justify-center\">\n                  <span className=\"text-white font-medium text-sm\">\n                    {user?.fullName?.[0] || user?.username?.[0] || \"A\"}\n                  </span>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleLogout}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                <LogOut className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"mb-6\">\n            <p className=\"text-gray-600\">\n              Access your enterprise applications based on your role permissions\n            </p>\n          </div>\n\n          {/* Applications Grid */}\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-medium text-gray-900 mb-4\">Your Applications</h2>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4\">\n              {applications.map((app, index) => {\n                const IconComponent = app.icon;\n                return (\n                  <Card\n                    key={index}\n                    className=\"cursor-pointer transition-shadow hover:shadow-md\"\n                  >\n                    <CardContent className=\"p-4 text-center\">\n                      <div className={`w-12 h-12 ${app.color} rounded-lg flex items-center justify-center mx-auto mb-3`}>\n                        <IconComponent className=\"h-6 w-6\" />\n                      </div>\n                      <h3 className=\"text-sm font-medium text-gray-900\">{app.name}</h3>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Support Tickets Section */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Support Tickets</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Ticket className=\"h-8 w-8 text-blue-600\" />\n                  </div>\n                  <p className=\"text-gray-600 mb-2\">There is one integration issue</p>\n                  <p className=\"text-sm text-gray-500 mb-4\">\n                    Due to security restrictions, Zammad cannot be accessed directly. Open Zammad in new window\n                  </p>\n                  <Button onClick={openZammad} className=\"bg-primary text-white hover:bg-primary-dark\">\n                    <ExternalLink className=\"h-4 w-4 mr-2\" />\n                    Open Zammad Portal\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Stats</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Open Tickets</span>\n                    <span className=\"font-semibold text-orange-600\">5</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Resolved Today</span>\n                    <span className=\"font-semibold text-green-600\">12</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Active Users</span>\n                    <span className=\"font-semibold text-blue-600\">48</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">System Health</span>\n                    <span className=\"font-semibold text-green-600\">Excellent</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7804},"client/src/pages/home.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Users,\n  Ticket,\n  Shield,\n  Settings,\n  MessageSquare,\n  BarChart,\n  Star,\n  MapPin,\n  Phone,\n  Mail\n} from \"lucide-react\";\n\nexport default function Home() {\n  const services = [\n    {\n      icon: Users,\n      title: \"Identity Management\",\n      description: \"Seamless Active Directory integration with single sign-on capabilities.\"\n    },\n    {\n      icon: Ticket,\n      title: \"Support Ticketing\",\n      description: \"Advanced Zammad-based ticketing system for customer and internal support.\"\n    },\n    {\n      icon: Shield,\n      title: \"Security Monitoring\",\n      description: \"Comprehensive security monitoring with Wazuh and fleet management.\"\n    },\n    {\n      icon: Settings,\n      title: \"DevOps Tools\",\n      description: \"Git hosting, container management, and CI/CD pipeline solutions.\"\n    },\n    {\n      icon: MessageSquare,\n      title: \"Communication\",\n      description: \"Enterprise email and collaboration platforms for seamless teamwork.\"\n    },\n    {\n      icon: BarChart,\n      title: \"Network Monitoring\",\n      description: \"Real-time network monitoring and performance optimization tools.\"\n    }\n  ];\n\n  const features = [\n    {\n      title: \"Enterprise Security\",\n      description: \"Active Directory integration with role-based access control and advanced security protocols.\"\n    },\n    {\n      title: \"Advanced Ticketing\",\n      description: \"Seamless Zammad integration for comprehensive customer support and internal ticket management.\"\n    },\n    {\n      title: \"Custom Solutions\",\n      description: \"Tailored software solutions designed to meet your specific business requirements and workflows.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-primary to-secondary min-h-[600px]\">\n        {/* Decorative circles */}\n        <div className=\"absolute top-10 left-10 w-32 h-32 bg-white opacity-10 rounded-full\"></div>\n        <div className=\"absolute bottom-10 right-10 w-48 h-48 bg-white opacity-10 rounded-full\"></div>\n        <div className=\"absolute top-1/2 left-1/4 w-24 h-24 bg-white opacity-5 rounded-full\"></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-5xl lg:text-6xl font-bold text-white leading-tight\">\n                Innovative<br />\n                <span className=\"text-accent\">Software Solutions</span><br />\n                for Modern<br />\n                Business\n              </h1>\n              <p className=\"mt-6 text-xl text-white opacity-90 leading-relaxed\">\n                Empowering organizations with cutting-edge technology, seamless integrations, and enterprise-grade security solutions.\n              </p>\n              <div className=\"mt-8\">\n                <Button className=\"bg-white text-primary px-8 py-3 text-lg font-semibold hover:bg-gray-100\">\n                  Get Started\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"flex justify-center lg:justify-end\">\n              <Card className=\"max-w-md w-full shadow-2xl bg-white\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                    <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                  </div>\n                  <div className=\"bg-gradient-to-r from-primary to-secondary h-2 rounded mb-4\"></div>\n                  <div className=\"space-y-3\">\n                    <div className=\"bg-gray-200 h-4 rounded w-3/4\"></div>\n                    <div className=\"bg-gray-200 h-4 rounded w-1/2\"></div>\n                    <div className=\"bg-gray-200 h-4 rounded w-5/6\"></div>\n                    <div className=\"bg-gray-200 h-4 rounded w-2/3\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Why Choose Us Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Why Choose STAR Solutions?</h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto mb-16\">\n            We deliver enterprise-grade software solutions with seamless Active Directory integration, advanced ticketing systems, and role-based access control.\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <div className=\"w-8 h-8 bg-white rounded-full flex items-center justify-center\">\n                    <div className=\"w-4 h-4 bg-gradient-to-br from-primary to-secondary rounded-full\"></div>\n                  </div>\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-3\">{feature.title}</h3>\n                <p className=\"text-gray-600\">{feature.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Our Services</h2>\n            <p className=\"text-xl text-gray-600\">Comprehensive software solutions for enterprise environments</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {services.map((service, index) => {\n              const IconComponent = service.icon;\n              return (\n                <Card key={index} className=\"transition-all duration-300 hover:shadow-lg border-0 shadow-sm\">\n                  <CardContent className=\"p-8\">\n                    <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mb-4\">\n                      <IconComponent className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-3\">{service.title}</h3>\n                    <p className=\"text-gray-600 leading-relaxed\">{service.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Get in Touch</h2>\n            <p className=\"text-xl text-gray-600\">Ready to transform your business with our solutions? Contact us today.</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Contact Information */}\n            <div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-8\">Contact Information</h3>\n              \n              <div className=\"space-y-6\">\n                <div className=\"flex items-start\">\n                  <div className=\"w-6 h-6 bg-primary rounded flex items-center justify-center mr-4 mt-1\">\n                    <MapPin className=\"h-4 w-4 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900\">Our Office</h4>\n                    <p className=\"text-gray-600\">123 Tech Avenue</p>\n                    <p className=\"text-gray-600\">Suite 450</p>\n                    <p className=\"text-gray-600\">Vancouver, BC V6B 4Y8</p>\n                    <p className=\"text-gray-600\">Canada</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"w-6 h-6 bg-primary rounded flex items-center justify-center mr-4 mt-1\">\n                    <Phone className=\"h-4 w-4 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900\">Phone</h4>\n                    <p className=\"text-gray-600\">+1 (604) 555-1234</p>\n                    <p className=\"text-gray-600 text-sm\">Monday - Friday, 9am - 5pm PST</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"w-6 h-6 bg-primary rounded flex items-center justify-center mr-4 mt-1\">\n                    <Mail className=\"h-4 w-4 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900\">Email</h4>\n                    <p className=\"text-gray-600\">info@starsolutions.ca</p>\n                    <p className=\"text-gray-600\">support@starsolutions.ca</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Contact Form */}\n            <div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-8\">Send Us a Message</h3>\n              \n              <form className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"fullName\">Full Name</Label>\n                    <Input\n                      id=\"fullName\"\n                      placeholder=\"John Doe\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"john.doe@example.com\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      placeholder=\"+1 (555) 123-4567\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"company\">Company Name</Label>\n                    <Input\n                      id=\"company\"\n                      placeholder=\"Acme Inc.\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"subject\">Subject</Label>\n                  <Input\n                    id=\"subject\"\n                    placeholder=\"General Inquiry\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"message\">Message</Label>\n                  <Textarea\n                    id=\"message\"\n                    rows={4}\n                    placeholder=\"Please tell us about your project or inquiry...\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                \n                <Button className=\"w-full bg-gradient-to-r from-primary to-secondary text-white py-3 text-lg font-semibold hover:from-primary-dark hover:to-secondary/90\">\n                  Send Message\n                </Button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer Section */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <Star className=\"h-6 w-6 text-primary mr-2\" />\n              <h3 className=\"text-xl font-bold\">STAR Solutions</h3>\n            </div>\n            <p className=\"text-gray-400 mb-6\">Creating innovative software solutions that drive business success.</p>\n            \n            <div className=\"flex justify-center space-x-6 mb-8\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                <div className=\"w-8 h-8 bg-gray-700 rounded flex items-center justify-center\">\n                  <div className=\"w-4 h-4 bg-current rounded-sm\"></div>\n                </div>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                <div className=\"w-8 h-8 bg-gray-700 rounded flex items-center justify-center\">\n                  <div className=\"w-4 h-4 bg-current rounded-sm\"></div>\n                </div>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                <div className=\"w-8 h-8 bg-gray-700 rounded flex items-center justify-center\">\n                  <div className=\"w-4 h-4 bg-current rounded-sm\"></div>\n                </div>\n              </a>\n            </div>\n            \n            <p className=\"text-sm text-gray-500\">© 2024 STAR Solutions. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":13915},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/login-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserCog, User } from \"lucide-react\";\n\nconst employeeLoginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst customerLoginSchema = z.object({\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype EmployeeLoginForm = z.infer<typeof employeeLoginSchema>;\ntype CustomerLoginForm = z.infer<typeof customerLoginSchema>;\n\ninterface LoginModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function LoginModal({ isOpen, onClose }: LoginModalProps) {\n  const [activeTab, setActiveTab] = useState(\"employee\");\n  const { loginEmployee, loginCustomer, isLoggingIn } = useAuth();\n  const { toast } = useToast();\n\n  const employeeForm = useForm<EmployeeLoginForm>({\n    resolver: zodResolver(employeeLoginSchema),\n    defaultValues: { username: \"\", password: \"\" },\n  });\n\n  const customerForm = useForm<CustomerLoginForm>({\n    resolver: zodResolver(customerLoginSchema),\n    defaultValues: { email: \"\", password: \"\" },\n  });\n\n  const handleEmployeeLogin = async (data: EmployeeLoginForm) => {\n    try {\n      await loginEmployee(data);\n      toast({\n        title: \"Login successful!\",\n        description: \"Welcome to STAR Solutions Employee Dashboard.\",\n      });\n      onClose();\n      window.location.href = \"/employee-dashboard\";\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCustomerLogin = async (data: CustomerLoginForm) => {\n    try {\n      await loginCustomer(data);\n      toast({\n        title: \"Login successful!\",\n        description: \"Welcome to STAR Solutions Customer Portal.\",\n      });\n      onClose();\n      window.location.href = \"/customer-dashboard\";\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleClose = () => {\n    employeeForm.reset();\n    customerForm.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Login to STAR Solutions</DialogTitle>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"employee\" className=\"flex items-center gap-2\">\n              <UserCog className=\"h-4 w-4\" />\n              Employee Login\n            </TabsTrigger>\n            <TabsTrigger value=\"customer\" className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4\" />\n              Customer Login\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"employee\" className=\"space-y-4\">\n            <form onSubmit={employeeForm.handleSubmit(handleEmployeeLogin)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  placeholder=\"Enter your AD username\"\n                  {...employeeForm.register(\"username\")}\n                />\n                {employeeForm.formState.errors.username && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {employeeForm.formState.errors.username.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"employee-password\">Password</Label>\n                <Input\n                  id=\"employee-password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  {...employeeForm.register(\"password\")}\n                />\n                {employeeForm.formState.errors.password && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {employeeForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={isLoggingIn}\n                className=\"w-full py-3 font-medium text-white bg-gradient-to-r from-primary to-secondary hover:from-primary-dark hover:to-secondary/90\"\n              >\n                {isLoggingIn ? \"Logging in...\" : \"Login as Employee\"}\n              </Button>\n\n              <div className=\"text-center\">\n                <a href=\"#\" className=\"text-sm text-primary hover:underline\">\n                  Need help? Contact Support\n                </a>\n              </div>\n            </form>\n          </TabsContent>\n\n          <TabsContent value=\"customer\" className=\"space-y-4\">\n            <form onSubmit={customerForm.handleSubmit(handleCustomerLogin)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  {...customerForm.register(\"email\")}\n                />\n                \n                {customerForm.formState.errors.email && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {customerForm.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"customer-password\">Password</Label>\n                <Input\n                  id=\"customer-password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  {...customerForm.register(\"password\")}\n                />\n                {customerForm.formState.errors.password && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {customerForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"rounded border-gray-300 text-primary focus:ring-primary\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Remember me</span>\n                </label>\n                <a href=\"#\" className=\"text-sm text-primary hover:underline\">\n                  Forgot password?\n                </a>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={isLoggingIn}\n                className=\"w-full bg-primary text-white hover:bg-primary-dark\"\n              >\n                {isLoggingIn ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n\n              \n            </form>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7593},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}