import type { Express, Request, Response } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import * as localAuth from "./auth/local";
import * as adAuth from "./auth/ad";
import * as zammadController from "./controllers/zammad-controller";
import session from "express-session";
import { z } from "zod";
import { fromZodError } from "zod-validation-error";
// insertTicketSchema removed - using Zammad API directly

// Generate a secret key for session
const SESSION_SECRET = process.env.SESSION_SECRET || "star-solutions-secret-key-change-in-production";

export async function registerRoutes(app: Express): Promise<Server> {
  // Setup express-session middleware
  app.use(
    session({
      secret: SESSION_SECRET,
      resave: false,
      saveUninitialized: false,
      cookie: {
        secure: process.env.NODE_ENV === "production",
        maxAge: 24 * 60 * 60 * 1000, // 24 hours
      },
    })
  );

  // Auth routes
  app.post("/api/auth/register", localAuth.registerCustomer);
  app.post("/api/auth/login", localAuth.loginCustomer);
  app.post("/api/auth/customer/login", localAuth.loginCustomer); // Add this line
  app.post("/api/auth/employee/login", adAuth.loginWithAD);      // Add this line
  app.post("/api/auth/ad-login", adAuth.loginWithAD);
  app.post("/api/auth/logout", localAuth.logout);
  
  // Customer approval routes (admin only)
  app.get("/api/admin/pending-customers", localAuth.isAuthenticated, localAuth.isAdmin, localAuth.getPendingCustomers);
  app.post("/api/admin/approve-customer/:userId", localAuth.isAuthenticated, localAuth.isAdmin, localAuth.approveCustomer);
  
  // Get current user
  app.get("/api/me", (req: Request, res: Response) => {
    if (req.session && req.session.isAuthenticated) {
      if (req.session.user) {
        const { password, ...userWithoutPassword } = req.session.user;
        return res.json({ 
        ...userWithoutPassword, 
        userType: "customer" 
      });
    } else if (req.session.adUser) {
      return res.json({ 
        ...req.session.adUser, 
        userType: "employee" 
      });
     }
    }
    return res.status(401).json({ message: "Not authenticated" });
  });

app.get("/api/auth/me", (req: Request, res: Response) => {
  if (req.session && req.session.isAuthenticated) {
    if (req.session.user) {
      const { password, ...userWithoutPassword } = req.session.user;
      // Add userType field to match frontend expectations
      return res.json({ 
        ...userWithoutPassword, 
        userType: "customer" 
      });
    } else if (req.session.adUser) {
      return res.json({ 
        ...req.session.adUser, 
        userType: "employee" 
      });
    }
  }
  return res.status(401).json({ message: "Not authenticated" });
});
  
  // Application Links routes
  app.get("/api/application-links", adAuth.isADAuthenticated, async (req: Request, res: Response) => {
    try {
      const links = await storage.getAllApplicationLinks();
      return res.json({ links });
    } catch (error) {
      console.error("Error getting application links:", error);
      return res.status(500).json({ message: "Server error" });
    }
  });
  
  // Route to reset application links (admin only)
  app.post("/api/admin/reset-app-links", adAuth.isADAuthenticated, adAuth.isADAdmin, async (req: Request, res: Response) => {
    try {
      // Clear all existing application links
      await storage.clearApplicationLinks();
      
      // Initialize with the new set of links
      const links = await storage.initializeAndGetApplicationLinks();
      
      return res.json({ 
        message: "Application links have been reset", 
        links 
      });
    } catch (error) {
      console.error("Error resetting application links:", error);
      return res.status(500).json({ message: "Server error" });
    }
  });
  
  // Subscription routes removed - not needed for this website
  
  // Zammad Ticket routes
  app.get("/api/tickets", zammadController.getTickets);
  app.get("/api/tickets/:id", zammadController.getTicketById);
  app.post("/api/tickets", zammadController.createTicket);
  app.patch("/api/tickets/:id", zammadController.updateTicket);

  // Customer dashboard routes
  app.get("/api/customer/tickets", localAuth.isAuthenticated, async (req: Request, res: Response) => {
    try {
      if (!req.session?.user?.email) {
        return res.status(401).json({ message: "User email not found" });
      }

      const { zammadService } = await import("./services/zammad");
      const tickets = await zammadService.getTicketsWithDetails(req.session.user.email);
      return res.json({ tickets });
    } catch (error) {
      console.error("Error getting customer tickets:", error);
      return res.status(500).json({ message: "Failed to fetch tickets" });
    }
  });

  app.get("/api/customer/ticket-stats", localAuth.isAuthenticated, async (req: Request, res: Response) => {
    try {
      if (!req.session?.user?.email) {
        return res.status(401).json({ message: "User email not found" });
      }

      const { zammadService } = await import("./services/zammad");
      const stats = await zammadService.getTicketStats(req.session.user.email);
      return res.json({ stats });
    } catch (error) {
      console.error("Error getting ticket stats:", error);
      return res.status(500).json({ message: "Failed to fetch ticket statistics" });
    }
  });

  app.post("/api/customer/tickets", localAuth.isAuthenticated, async (req: Request, res: Response) => {
    try {
      if (!req.session?.user?.email || !req.session?.user?.fullName) {
        return res.status(401).json({ message: "User information not found" });
      }

      const { subject, description, department, priority = "medium" } = req.body;
      
      if (!subject || !description) {
        return res.status(400).json({ message: "Subject and description are required" });
      }

      const { zammadService } = await import("./services/zammad");
      
      const ticketData = {
        subject: subject,
        description: description,
        department: department,
        priority: priority,
        customer: {
          email: req.session.user.email,
          name: req.session.user.fullName
        }
      };

      console.log('Creating ticket with data:', JSON.stringify(ticketData, null, 2));
      const ticket = await zammadService.createTicket(ticketData);
      return res.json({ ticket });
    } catch (error) {
      console.error("Error creating customer ticket:", error);
      return res.status(500).json({ message: "Failed to create ticket" });
    }
  });

// Add this after the POST /api/customer/tickets route (around line 160)
// Get specific ticket details with articles  
app.get('/api/customer/tickets/:ticketId', async (req, res) => {
  // Check if user is authenticated
  if (!req.session.user) {
    return res.status(401).json({ message: "Authentication required" });
  }
  try {
    if (req.session.user.role !== 'customer') {
      return res.status(403).json({ message: "Access denied" });
    }

    const ticketId = req.params.ticketId;
    if (!ticketId) {
      return res.status(400).json({ message: "Ticket ID is required" });
    }

    const { zammadService } = await import("./services/zammad");
    const ticketData = await zammadService.getTicketWithArticles(ticketId, req.session.user.email);
    
    return res.json(ticketData);
  } catch (error) {
    console.error("Error fetching customer ticket details:", error);
    return res.status(500).json({ message: "Failed to fetch ticket details" });
  }
});
  
  // Legacy ticket routes removed - all ticket operations handled by Zammad API

  // Initialize demo data (this would not be in a production app)
  await initializeDemoData();

  const httpServer = createServer(app);
  return httpServer;
}

// Initialize demo data for testing
async function initializeDemoData() {
  try {
    // Create admin user
    const adminExists = await storage.getUserByEmail("admin@starsolutions.ca");
    if (!adminExists) {
      await storage.createUser({
        username: "admin",
        email: "admin@starsolutions.ca",
        password: localAuth.hashPassword("admin123"),
        fullName: "Admin User",
        role: "admin",
        status: "active"
      });
    }
    
    // Create a demo customer
    const customerExists = await storage.getUserByEmail("customer@example.com");
    if (!customerExists) {
      const customer = await storage.createUser({
        username: "customer",
        email: "customer@example.com",
        password: localAuth.hashPassword("customer123"),
        fullName: "Demo Customer",
        companyName: "Acme Corporation",
        phone: "555-1234",
        role: "customer",
        status: "active"
      });
      
      // Demo ticket creation removed - tickets are now handled by Zammad API directly
      // When customers log in, they will create tickets through the Zammad integration
    }
  } catch (error) {
    console.error("Error initializing demo data:", error);
  }
}
